/* eslint-disable no-use-before-define */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getCollectionIDType: function() {
        return getCollectionIDType;
    },
    default: function() {
        return _default;
    }
});
const _graphql = require("graphql");
const _graphqltypejson = require("graphql-type-json");
const _types = require("../../fields/config/types");
const _formatLabels = require("../../utilities/formatLabels");
const _groupOrTabHasRequiredSubfield = require("../../utilities/groupOrTabHasRequiredSubfield");
const _combineParentName = /*#__PURE__*/ _interop_require_default(require("../utilities/combineParentName"));
const _formatName = /*#__PURE__*/ _interop_require_default(require("../utilities/formatName"));
const _withNullableType = /*#__PURE__*/ _interop_require_default(require("./withNullableType"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const idFieldTypes = {
    number: _graphql.GraphQLInt,
    text: _graphql.GraphQLString
};
const getCollectionIDType = (payload, collection)=>{
    const idField = collection.fields.find((field)=>(0, _types.fieldAffectsData)(field) && field.name === 'id');
    if (!idField) {
        return idFieldTypes[payload.db.defaultIDType];
    }
    return idFieldTypes[idField.type];
};
function buildMutationInputType(payload, name, fields, parentName, forceNullable = false) {
    const fieldToSchemaMap = {
        array: (inputObjectTypeConfig, field)=>{
            const fullName = (0, _combineParentName.default)(parentName, (0, _formatLabels.toWords)(field.name, true));
            let type = buildMutationInputType(payload, fullName, field.fields, fullName);
            if (!type) return inputObjectTypeConfig;
            type = new _graphql.GraphQLList((0, _withNullableType.default)(field, type, forceNullable));
            return {
                ...inputObjectTypeConfig,
                [field.name]: {
                    type
                }
            };
        },
        blocks: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: _graphqltypejson.GraphQLJSON
                }
            }),
        checkbox: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: _graphql.GraphQLBoolean
                }
            }),
        code: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLString, forceNullable)
                }
            }),
        collapsible: (inputObjectTypeConfig, field)=>field.fields.reduce((acc, subField)=>{
                const addSubField = fieldToSchemaMap[subField.type];
                if (addSubField) return addSubField(acc, subField);
                return acc;
            }, inputObjectTypeConfig),
        date: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLString, forceNullable)
                }
            }),
        email: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLString, forceNullable)
                }
            }),
        group: (inputObjectTypeConfig, field)=>{
            const requiresAtLeastOneField = (0, _groupOrTabHasRequiredSubfield.groupOrTabHasRequiredSubfield)(field);
            const fullName = (0, _combineParentName.default)(parentName, (0, _formatLabels.toWords)(field.name, true));
            let type = buildMutationInputType(payload, fullName, field.fields, fullName);
            if (!type) return inputObjectTypeConfig;
            if (requiresAtLeastOneField) type = new _graphql.GraphQLNonNull(type);
            return {
                ...inputObjectTypeConfig,
                [field.name]: {
                    type
                }
            };
        },
        json: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphqltypejson.GraphQLJSON, forceNullable)
                }
            }),
        number: (inputObjectTypeConfig, field)=>{
            const type = field.name === 'id' ? _graphql.GraphQLInt : _graphql.GraphQLFloat;
            return {
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, field.hasMany === true ? new _graphql.GraphQLList(type) : type, forceNullable)
                }
            };
        },
        point: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, new _graphql.GraphQLList(_graphql.GraphQLFloat), forceNullable)
                }
            }),
        radio: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLString, forceNullable)
                }
            }),
        relationship: (inputObjectTypeConfig, field)=>{
            const { relationTo } = field;
            let type;
            if (Array.isArray(relationTo)) {
                const fullName = `${(0, _combineParentName.default)(parentName, (0, _formatLabels.toWords)(field.name, true))}RelationshipInput`;
                type = new _graphql.GraphQLInputObjectType({
                    name: fullName,
                    fields: {
                        relationTo: {
                            type: new _graphql.GraphQLEnumType({
                                name: `${fullName}RelationTo`,
                                values: relationTo.reduce((values, option)=>({
                                        ...values,
                                        [(0, _formatName.default)(option)]: {
                                            value: option
                                        }
                                    }), {})
                            })
                        },
                        value: {
                            type: _graphqltypejson.GraphQLJSON
                        }
                    }
                });
            } else {
                type = getCollectionIDType(payload, payload.collections[relationTo].config);
            }
            return {
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: field.hasMany ? new _graphql.GraphQLList(type) : type
                }
            };
        },
        richText: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphqltypejson.GraphQLJSON, forceNullable)
                }
            }),
        row: (inputObjectTypeConfig, field)=>field.fields.reduce((acc, subField)=>{
                const addSubField = fieldToSchemaMap[subField.type];
                if (addSubField) return addSubField(acc, subField);
                return acc;
            }, inputObjectTypeConfig),
        select: (inputObjectTypeConfig, field)=>{
            const formattedName = `${(0, _combineParentName.default)(parentName, field.name)}_MutationInput`;
            let type = new _graphql.GraphQLEnumType({
                name: formattedName,
                values: field.options.reduce((values, option)=>{
                    if ((0, _types.optionIsObject)(option)) {
                        return {
                            ...values,
                            [(0, _formatName.default)(option.value)]: {
                                value: option.value
                            }
                        };
                    }
                    return {
                        ...values,
                        [(0, _formatName.default)(option)]: {
                            value: option
                        }
                    };
                }, {})
            });
            type = field.hasMany ? new _graphql.GraphQLList(type) : type;
            type = (0, _withNullableType.default)(field, type, forceNullable);
            return {
                ...inputObjectTypeConfig,
                [field.name]: {
                    type
                }
            };
        },
        tabs: (inputObjectTypeConfig, field)=>{
            return field.tabs.reduce((acc, tab)=>{
                if ((0, _types.tabHasName)(tab)) {
                    const fullName = (0, _combineParentName.default)(parentName, (0, _formatLabels.toWords)(tab.name, true));
                    const requiresAtLeastOneField = (0, _groupOrTabHasRequiredSubfield.groupOrTabHasRequiredSubfield)(field);
                    let type = buildMutationInputType(payload, fullName, tab.fields, fullName);
                    if (!type) return acc;
                    if (requiresAtLeastOneField) type = new _graphql.GraphQLNonNull(type);
                    return {
                        ...acc,
                        [tab.name]: {
                            type
                        }
                    };
                }
                return {
                    ...acc,
                    ...tab.fields.reduce((subFieldSchema, subField)=>{
                        const addSubField = fieldToSchemaMap[subField.type];
                        if (addSubField) return addSubField(subFieldSchema, subField);
                        return subFieldSchema;
                    }, acc)
                };
            }, inputObjectTypeConfig);
        },
        text: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLString, forceNullable)
                }
            }),
        textarea: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLString, forceNullable)
                }
            }),
        upload: (inputObjectTypeConfig, field)=>({
                ...inputObjectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLString, forceNullable)
                }
            })
    };
    const fieldName = (0, _formatName.default)(name);
    const fieldSchemas = fields.reduce((inputObjectTypeConfig, field)=>{
        const fieldSchema = fieldToSchemaMap[field.type];
        if (typeof fieldSchema !== 'function') {
            return inputObjectTypeConfig;
        }
        const schema = fieldSchema(inputObjectTypeConfig, field);
        if (Object.keys(schema).length === 0) {
            return inputObjectTypeConfig;
        }
        return {
            ...inputObjectTypeConfig,
            ...fieldSchema(inputObjectTypeConfig, field)
        };
    }, {});
    if (Object.keys(fieldSchemas).length === 0) {
        return null;
    }
    return new _graphql.GraphQLInputObjectType({
        name: `mutation${fieldName}Input`,
        fields: fieldSchemas
    });
}
const _default = buildMutationInputType;

//# sourceMappingURL=data:application/json;base64,