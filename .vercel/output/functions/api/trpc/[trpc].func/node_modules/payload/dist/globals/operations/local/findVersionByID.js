"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return findVersionByIDLocal;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _findVersionByID = /*#__PURE__*/ _interop_require_default(require("../findVersionByID"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findVersionByIDLocal(payload, options) {
    const { id, context, depth, disableErrors = false, fallbackLocale = null, locale = payload.config.localization ? payload.config.localization?.defaultLocale : null, overrideAccess = true, req: incomingReq, showHiddenFields, slug: globalSlug, user } = options;
    const globalConfig = payload.globals.config.find((config)=>config.slug === globalSlug);
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!globalConfig) {
        throw new _errors.APIError(`The global with slug ${String(globalSlug)} can't be found.`);
    }
    const req = {
        fallbackLocale,
        i18n,
        locale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req, context);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _findVersionByID.default)({
        id,
        depth,
        disableErrors,
        globalConfig,
        overrideAccess,
        req,
        showHiddenFields
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9nbG9iYWxzL29wZXJhdGlvbnMvbG9jYWwvZmluZFZlcnNpb25CeUlELnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgR2VuZXJhdGVkVHlwZXMsIFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3MvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWQgfSBmcm9tICcuLi8uLi8uLi9wYXlsb2FkJ1xuaW1wb3J0IHR5cGUgeyBEb2N1bWVudCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBUeXBlV2l0aFZlcnNpb24gfSBmcm9tICcuLi8uLi8uLi92ZXJzaW9ucy90eXBlcydcblxuaW1wb3J0IHsgZ2V0RGF0YUxvYWRlciB9IGZyb20gJy4uLy4uLy4uL2NvbGxlY3Rpb25zL2RhdGFsb2FkZXInXG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycydcbmltcG9ydCB7IHNldFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy9zZXRSZXF1ZXN0Q29udGV4dCdcbmltcG9ydCB7IGkxOG5Jbml0IH0gZnJvbSAnLi4vLi4vLi4vdHJhbnNsYXRpb25zL2luaXQnXG5pbXBvcnQgZmluZFZlcnNpb25CeUlEIGZyb20gJy4uL2ZpbmRWZXJzaW9uQnlJRCdcblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXT4gPSB7XG4gIGNvbnRleHQ/OiBSZXF1ZXN0Q29udGV4dFxuICBkZXB0aD86IG51bWJlclxuICBkaXNhYmxlRXJyb3JzPzogYm9vbGVhblxuICBmYWxsYmFja0xvY2FsZT86IHN0cmluZ1xuICBpZDogc3RyaW5nXG4gIGxvY2FsZT86IHN0cmluZ1xuICBvdmVycmlkZUFjY2Vzcz86IGJvb2xlYW5cbiAgcmVxPzogUGF5bG9hZFJlcXVlc3RcbiAgc2hvd0hpZGRlbkZpZWxkcz86IGJvb2xlYW5cbiAgc2x1ZzogVFxuICB1c2VyPzogRG9jdW1lbnRcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZmluZFZlcnNpb25CeUlETG9jYWw8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydnbG9iYWxzJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBPcHRpb25zPFQ+LFxuKTogUHJvbWlzZTxUeXBlV2l0aFZlcnNpb248R2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXVtUXT4+IHtcbiAgY29uc3Qge1xuICAgIGlkLFxuICAgIGNvbnRleHQsXG4gICAgZGVwdGgsXG4gICAgZGlzYWJsZUVycm9ycyA9IGZhbHNlLFxuICAgIGZhbGxiYWNrTG9jYWxlID0gbnVsbCxcbiAgICBsb2NhbGUgPSBwYXlsb2FkLmNvbmZpZy5sb2NhbGl6YXRpb24gPyBwYXlsb2FkLmNvbmZpZy5sb2NhbGl6YXRpb24/LmRlZmF1bHRMb2NhbGUgOiBudWxsLFxuICAgIG92ZXJyaWRlQWNjZXNzID0gdHJ1ZSxcbiAgICByZXE6IGluY29taW5nUmVxLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgc2x1ZzogZ2xvYmFsU2x1ZyxcbiAgICB1c2VyLFxuICB9ID0gb3B0aW9uc1xuXG4gIGNvbnN0IGdsb2JhbENvbmZpZyA9IHBheWxvYWQuZ2xvYmFscy5jb25maWcuZmluZCgoY29uZmlnKSA9PiBjb25maWcuc2x1ZyA9PT0gZ2xvYmFsU2x1ZylcbiAgY29uc3QgaTE4biA9IGkxOG5Jbml0KHBheWxvYWQuY29uZmlnLmkxOG4pXG5cbiAgaWYgKCFnbG9iYWxDb25maWcpIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoYFRoZSBnbG9iYWwgd2l0aCBzbHVnICR7U3RyaW5nKGdsb2JhbFNsdWcpfSBjYW4ndCBiZSBmb3VuZC5gKVxuICB9XG5cbiAgY29uc3QgcmVxID0ge1xuICAgIGZhbGxiYWNrTG9jYWxlLFxuICAgIGkxOG4sXG4gICAgbG9jYWxlLFxuICAgIHBheWxvYWQsXG4gICAgcGF5bG9hZEFQSTogJ2xvY2FsJyxcbiAgICB0OiBpMThuLnQsXG4gICAgdHJhbnNhY3Rpb25JRDogaW5jb21pbmdSZXE/LnRyYW5zYWN0aW9uSUQsXG4gICAgdXNlcixcbiAgfSBhcyBQYXlsb2FkUmVxdWVzdFxuICBzZXRSZXF1ZXN0Q29udGV4dChyZXEsIGNvbnRleHQpXG5cbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIHJldHVybiBmaW5kVmVyc2lvbkJ5SUQoe1xuICAgIGlkLFxuICAgIGRlcHRoLFxuICAgIGRpc2FibGVFcnJvcnMsXG4gICAgZ2xvYmFsQ29uZmlnLFxuICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgIHJlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICB9KVxufVxuIl0sIm5hbWVzIjpbImZpbmRWZXJzaW9uQnlJRExvY2FsIiwicGF5bG9hZCIsIm9wdGlvbnMiLCJpZCIsImNvbnRleHQiLCJkZXB0aCIsImRpc2FibGVFcnJvcnMiLCJmYWxsYmFja0xvY2FsZSIsImxvY2FsZSIsImNvbmZpZyIsImxvY2FsaXphdGlvbiIsImRlZmF1bHRMb2NhbGUiLCJvdmVycmlkZUFjY2VzcyIsInJlcSIsImluY29taW5nUmVxIiwic2hvd0hpZGRlbkZpZWxkcyIsInNsdWciLCJnbG9iYWxTbHVnIiwidXNlciIsImdsb2JhbENvbmZpZyIsImdsb2JhbHMiLCJmaW5kIiwiaTE4biIsImkxOG5Jbml0IiwiQVBJRXJyb3IiLCJTdHJpbmciLCJwYXlsb2FkQVBJIiwidCIsInRyYW5zYWN0aW9uSUQiLCJzZXRSZXF1ZXN0Q29udGV4dCIsInBheWxvYWREYXRhTG9hZGVyIiwiZ2V0RGF0YUxvYWRlciIsImZpbmRWZXJzaW9uQnlJRCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkEwQkE7OztlQUE4QkE7Ozs0QkFwQkE7d0JBQ0w7bUNBQ1M7c0JBQ1Q7d0VBQ0c7Ozs7OztBQWdCYixlQUFlQSxxQkFDNUJDLE9BQWdCLEVBQ2hCQyxPQUFtQjtJQUVuQixNQUFNLEVBQ0pDLEVBQUUsRUFDRkMsT0FBTyxFQUNQQyxLQUFLLEVBQ0xDLGdCQUFnQixLQUFLLEVBQ3JCQyxpQkFBaUIsSUFBSSxFQUNyQkMsU0FBU1AsUUFBUVEsTUFBTSxDQUFDQyxZQUFZLEdBQUdULFFBQVFRLE1BQU0sQ0FBQ0MsWUFBWSxFQUFFQyxnQkFBZ0IsSUFBSSxFQUN4RkMsaUJBQWlCLElBQUksRUFDckJDLEtBQUtDLFdBQVcsRUFDaEJDLGdCQUFnQixFQUNoQkMsTUFBTUMsVUFBVSxFQUNoQkMsSUFBSSxFQUNMLEdBQUdoQjtJQUVKLE1BQU1pQixlQUFlbEIsUUFBUW1CLE9BQU8sQ0FBQ1gsTUFBTSxDQUFDWSxJQUFJLENBQUMsQ0FBQ1osU0FBV0EsT0FBT08sSUFBSSxLQUFLQztJQUM3RSxNQUFNSyxPQUFPQyxJQUFBQSxjQUFRLEVBQUN0QixRQUFRUSxNQUFNLENBQUNhLElBQUk7SUFFekMsSUFBSSxDQUFDSCxjQUFjO1FBQ2pCLE1BQU0sSUFBSUssZ0JBQVEsQ0FBQyxDQUFDLHFCQUFxQixFQUFFQyxPQUFPUixZQUFZLGdCQUFnQixDQUFDO0lBQ2pGO0lBRUEsTUFBTUosTUFBTTtRQUNWTjtRQUNBZTtRQUNBZDtRQUNBUDtRQUNBeUIsWUFBWTtRQUNaQyxHQUFHTCxLQUFLSyxDQUFDO1FBQ1RDLGVBQWVkLGFBQWFjO1FBQzVCVjtJQUNGO0lBQ0FXLElBQUFBLG9DQUFpQixFQUFDaEIsS0FBS1Q7SUFFdkIsSUFBSSxDQUFDUyxJQUFJaUIsaUJBQWlCLEVBQUVqQixJQUFJaUIsaUJBQWlCLEdBQUdDLElBQUFBLHlCQUFhLEVBQUNsQjtJQUVsRSxPQUFPbUIsSUFBQUEsd0JBQWUsRUFBQztRQUNyQjdCO1FBQ0FFO1FBQ0FDO1FBQ0FhO1FBQ0FQO1FBQ0FDO1FBQ0FFO0lBQ0Y7QUFDRiJ9