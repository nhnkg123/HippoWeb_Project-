"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return updateLocal;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _update = /*#__PURE__*/ _interop_require_default(require("../update"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function updateLocal(payload, options) {
    const { context, data, depth, draft, fallbackLocale = null, locale = payload.config.localization ? payload.config.localization?.defaultLocale : null, overrideAccess = true, req: incomingReq, showHiddenFields, slug: globalSlug, user } = options;
    const globalConfig = payload.globals.config.find((config)=>config.slug === globalSlug);
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!globalConfig) {
        throw new _errors.APIError(`The global with slug ${String(globalSlug)} can't be found.`);
    }
    const req = {
        fallbackLocale,
        i18n,
        locale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req, context);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _update.default)({
        data,
        depth,
        draft,
        globalConfig,
        overrideAccess,
        req,
        showHiddenFields,
        slug: globalSlug
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9nbG9iYWxzL29wZXJhdGlvbnMvbG9jYWwvdXBkYXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRGVlcFBhcnRpYWwgfSBmcm9tICd0cy1lc3NlbnRpYWxzJ1xuXG5pbXBvcnQgdHlwZSB7IEdlbmVyYXRlZFR5cGVzLCBSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uLydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkIH0gZnJvbSAnLi4vLi4vLi4vcGF5bG9hZCdcbmltcG9ydCB0eXBlIHsgRG9jdW1lbnQgfSBmcm9tICcuLi8uLi8uLi90eXBlcydcblxuaW1wb3J0IHsgZ2V0RGF0YUxvYWRlciB9IGZyb20gJy4uLy4uLy4uL2NvbGxlY3Rpb25zL2RhdGFsb2FkZXInXG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycydcbmltcG9ydCB7IHNldFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy9zZXRSZXF1ZXN0Q29udGV4dCdcbmltcG9ydCB7IGkxOG5Jbml0IH0gZnJvbSAnLi4vLi4vLi4vdHJhbnNsYXRpb25zL2luaXQnXG5pbXBvcnQgdXBkYXRlIGZyb20gJy4uL3VwZGF0ZSdcblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUU2x1ZyBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydnbG9iYWxzJ10+ID0ge1xuICBjb250ZXh0PzogUmVxdWVzdENvbnRleHRcbiAgZGF0YTogRGVlcFBhcnRpYWw8T21pdDxHZW5lcmF0ZWRUeXBlc1snZ2xvYmFscyddW1RTbHVnXSwgJ2lkJz4+XG4gIGRlcHRoPzogbnVtYmVyXG4gIGRyYWZ0PzogYm9vbGVhblxuICBmYWxsYmFja0xvY2FsZT86IHN0cmluZ1xuICBsb2NhbGU/OiBzdHJpbmdcbiAgb3ZlcnJpZGVBY2Nlc3M/OiBib29sZWFuXG4gIHJlcT86IFBheWxvYWRSZXF1ZXN0XG4gIHNob3dIaWRkZW5GaWVsZHM/OiBib29sZWFuXG4gIHNsdWc6IFRTbHVnXG4gIHVzZXI/OiBEb2N1bWVudFxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiB1cGRhdGVMb2NhbDxUU2x1ZyBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydnbG9iYWxzJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBPcHRpb25zPFRTbHVnPixcbik6IFByb21pc2U8R2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXVtUU2x1Z10+IHtcbiAgY29uc3Qge1xuICAgIGNvbnRleHQsXG4gICAgZGF0YSxcbiAgICBkZXB0aCxcbiAgICBkcmFmdCxcbiAgICBmYWxsYmFja0xvY2FsZSA9IG51bGwsXG4gICAgbG9jYWxlID0gcGF5bG9hZC5jb25maWcubG9jYWxpemF0aW9uID8gcGF5bG9hZC5jb25maWcubG9jYWxpemF0aW9uPy5kZWZhdWx0TG9jYWxlIDogbnVsbCxcbiAgICBvdmVycmlkZUFjY2VzcyA9IHRydWUsXG4gICAgcmVxOiBpbmNvbWluZ1JlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgIHNsdWc6IGdsb2JhbFNsdWcsXG4gICAgdXNlcixcbiAgfSA9IG9wdGlvbnNcblxuICBjb25zdCBnbG9iYWxDb25maWcgPSBwYXlsb2FkLmdsb2JhbHMuY29uZmlnLmZpbmQoKGNvbmZpZykgPT4gY29uZmlnLnNsdWcgPT09IGdsb2JhbFNsdWcpXG4gIGNvbnN0IGkxOG4gPSBpMThuSW5pdChwYXlsb2FkLmNvbmZpZy5pMThuKVxuXG4gIGlmICghZ2xvYmFsQ29uZmlnKSB7XG4gICAgdGhyb3cgbmV3IEFQSUVycm9yKGBUaGUgZ2xvYmFsIHdpdGggc2x1ZyAke1N0cmluZyhnbG9iYWxTbHVnKX0gY2FuJ3QgYmUgZm91bmQuYClcbiAgfVxuXG4gIGNvbnN0IHJlcSA9IHtcbiAgICBmYWxsYmFja0xvY2FsZSxcbiAgICBpMThuLFxuICAgIGxvY2FsZSxcbiAgICBwYXlsb2FkLFxuICAgIHBheWxvYWRBUEk6ICdsb2NhbCcsXG4gICAgdDogaTE4bi50LFxuICAgIHRyYW5zYWN0aW9uSUQ6IGluY29taW5nUmVxPy50cmFuc2FjdGlvbklELFxuICAgIHVzZXIsXG4gIH0gYXMgUGF5bG9hZFJlcXVlc3RcbiAgc2V0UmVxdWVzdENvbnRleHQocmVxLCBjb250ZXh0KVxuXG4gIGlmICghcmVxLnBheWxvYWREYXRhTG9hZGVyKSByZXEucGF5bG9hZERhdGFMb2FkZXIgPSBnZXREYXRhTG9hZGVyKHJlcSlcblxuICByZXR1cm4gdXBkYXRlPFRTbHVnPih7XG4gICAgZGF0YSxcbiAgICBkZXB0aCxcbiAgICBkcmFmdCxcbiAgICBnbG9iYWxDb25maWcsXG4gICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgcmVxLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgc2x1ZzogZ2xvYmFsU2x1ZyBhcyBzdHJpbmcsXG4gIH0pXG59XG4iXSwibmFtZXMiOlsidXBkYXRlTG9jYWwiLCJwYXlsb2FkIiwib3B0aW9ucyIsImNvbnRleHQiLCJkYXRhIiwiZGVwdGgiLCJkcmFmdCIsImZhbGxiYWNrTG9jYWxlIiwibG9jYWxlIiwiY29uZmlnIiwibG9jYWxpemF0aW9uIiwiZGVmYXVsdExvY2FsZSIsIm92ZXJyaWRlQWNjZXNzIiwicmVxIiwiaW5jb21pbmdSZXEiLCJzaG93SGlkZGVuRmllbGRzIiwic2x1ZyIsImdsb2JhbFNsdWciLCJ1c2VyIiwiZ2xvYmFsQ29uZmlnIiwiZ2xvYmFscyIsImZpbmQiLCJpMThuIiwiaTE4bkluaXQiLCJBUElFcnJvciIsIlN0cmluZyIsInBheWxvYWRBUEkiLCJ0IiwidHJhbnNhY3Rpb25JRCIsInNldFJlcXVlc3RDb250ZXh0IiwicGF5bG9hZERhdGFMb2FkZXIiLCJnZXREYXRhTG9hZGVyIiwidXBkYXRlIl0sIm1hcHBpbmdzIjoiOzs7OytCQTJCQTs7O2VBQThCQTs7OzRCQXBCQTt3QkFDTDttQ0FDUztzQkFDVDsrREFDTjs7Ozs7O0FBZ0JKLGVBQWVBLFlBQzVCQyxPQUFnQixFQUNoQkMsT0FBdUI7SUFFdkIsTUFBTSxFQUNKQyxPQUFPLEVBQ1BDLElBQUksRUFDSkMsS0FBSyxFQUNMQyxLQUFLLEVBQ0xDLGlCQUFpQixJQUFJLEVBQ3JCQyxTQUFTUCxRQUFRUSxNQUFNLENBQUNDLFlBQVksR0FBR1QsUUFBUVEsTUFBTSxDQUFDQyxZQUFZLEVBQUVDLGdCQUFnQixJQUFJLEVBQ3hGQyxpQkFBaUIsSUFBSSxFQUNyQkMsS0FBS0MsV0FBVyxFQUNoQkMsZ0JBQWdCLEVBQ2hCQyxNQUFNQyxVQUFVLEVBQ2hCQyxJQUFJLEVBQ0wsR0FBR2hCO0lBRUosTUFBTWlCLGVBQWVsQixRQUFRbUIsT0FBTyxDQUFDWCxNQUFNLENBQUNZLElBQUksQ0FBQyxDQUFDWixTQUFXQSxPQUFPTyxJQUFJLEtBQUtDO0lBQzdFLE1BQU1LLE9BQU9DLElBQUFBLGNBQVEsRUFBQ3RCLFFBQVFRLE1BQU0sQ0FBQ2EsSUFBSTtJQUV6QyxJQUFJLENBQUNILGNBQWM7UUFDakIsTUFBTSxJQUFJSyxnQkFBUSxDQUFDLENBQUMscUJBQXFCLEVBQUVDLE9BQU9SLFlBQVksZ0JBQWdCLENBQUM7SUFDakY7SUFFQSxNQUFNSixNQUFNO1FBQ1ZOO1FBQ0FlO1FBQ0FkO1FBQ0FQO1FBQ0F5QixZQUFZO1FBQ1pDLEdBQUdMLEtBQUtLLENBQUM7UUFDVEMsZUFBZWQsYUFBYWM7UUFDNUJWO0lBQ0Y7SUFDQVcsSUFBQUEsb0NBQWlCLEVBQUNoQixLQUFLVjtJQUV2QixJQUFJLENBQUNVLElBQUlpQixpQkFBaUIsRUFBRWpCLElBQUlpQixpQkFBaUIsR0FBR0MsSUFBQUEseUJBQWEsRUFBQ2xCO0lBRWxFLE9BQU9tQixJQUFBQSxlQUFNLEVBQVE7UUFDbkI1QjtRQUNBQztRQUNBQztRQUNBYTtRQUNBUDtRQUNBQztRQUNBRTtRQUNBQyxNQUFNQztJQUNSO0FBQ0YifQ==