"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return findVersionsLocal;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _findVersions = /*#__PURE__*/ _interop_require_default(require("../findVersions"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findVersionsLocal(payload, options) {
    const { context, depth, fallbackLocale = null, limit, locale = payload.config.localization ? payload.config.localization?.defaultLocale : null, overrideAccess = true, page, req: incomingReq, showHiddenFields, slug: globalSlug, sort, user, where } = options;
    const globalConfig = payload.globals.config.find((config)=>config.slug === globalSlug);
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!globalConfig) {
        throw new _errors.APIError(`The global with slug ${String(globalSlug)} can't be found.`);
    }
    const req = {
        fallbackLocale,
        i18n,
        locale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req, context);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _findVersions.default)({
        depth,
        globalConfig,
        limit,
        overrideAccess,
        page,
        req,
        showHiddenFields,
        sort,
        where
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9nbG9iYWxzL29wZXJhdGlvbnMvbG9jYWwvZmluZFZlcnNpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgR2VuZXJhdGVkVHlwZXMsIFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vJ1xuaW1wb3J0IHR5cGUgeyBQYWdpbmF0ZWREb2NzIH0gZnJvbSAnLi4vLi4vLi4vZGF0YWJhc2UvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy90eXBlcydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZCB9IGZyb20gJy4uLy4uLy4uL3BheWxvYWQnXG5pbXBvcnQgdHlwZSB7IERvY3VtZW50LCBXaGVyZSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBUeXBlV2l0aFZlcnNpb24gfSBmcm9tICcuLi8uLi8uLi92ZXJzaW9ucy90eXBlcydcblxuaW1wb3J0IHsgZ2V0RGF0YUxvYWRlciB9IGZyb20gJy4uLy4uLy4uL2NvbGxlY3Rpb25zL2RhdGFsb2FkZXInXG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycydcbmltcG9ydCB7IHNldFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy9zZXRSZXF1ZXN0Q29udGV4dCdcbmltcG9ydCB7IGkxOG5Jbml0IH0gZnJvbSAnLi4vLi4vLi4vdHJhbnNsYXRpb25zL2luaXQnXG5pbXBvcnQgZmluZFZlcnNpb25zIGZyb20gJy4uL2ZpbmRWZXJzaW9ucydcblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUIGV4dGVuZHMga2V5b2YgR2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXT4gPSB7XG4gIGNvbnRleHQ/OiBSZXF1ZXN0Q29udGV4dFxuICBkZXB0aD86IG51bWJlclxuICBmYWxsYmFja0xvY2FsZT86IHN0cmluZ1xuICBsaW1pdD86IG51bWJlclxuICBsb2NhbGU/OiBzdHJpbmdcbiAgb3ZlcnJpZGVBY2Nlc3M/OiBib29sZWFuXG4gIHBhZ2U/OiBudW1iZXJcbiAgcmVxPzogUGF5bG9hZFJlcXVlc3RcbiAgc2hvd0hpZGRlbkZpZWxkcz86IGJvb2xlYW5cbiAgc2x1ZzogVFxuICBzb3J0Pzogc3RyaW5nXG4gIHVzZXI/OiBEb2N1bWVudFxuICB3aGVyZT86IFdoZXJlXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGZpbmRWZXJzaW9uc0xvY2FsPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snZ2xvYmFscyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogT3B0aW9uczxUPixcbik6IFByb21pc2U8UGFnaW5hdGVkRG9jczxUeXBlV2l0aFZlcnNpb248R2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXVtUXT4+PiB7XG4gIGNvbnN0IHtcbiAgICBjb250ZXh0LFxuICAgIGRlcHRoLFxuICAgIGZhbGxiYWNrTG9jYWxlID0gbnVsbCxcbiAgICBsaW1pdCxcbiAgICBsb2NhbGUgPSBwYXlsb2FkLmNvbmZpZy5sb2NhbGl6YXRpb24gPyBwYXlsb2FkLmNvbmZpZy5sb2NhbGl6YXRpb24/LmRlZmF1bHRMb2NhbGUgOiBudWxsLFxuICAgIG92ZXJyaWRlQWNjZXNzID0gdHJ1ZSxcbiAgICBwYWdlLFxuICAgIHJlcTogaW5jb21pbmdSZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICBzbHVnOiBnbG9iYWxTbHVnLFxuICAgIHNvcnQsXG4gICAgdXNlcixcbiAgICB3aGVyZSxcbiAgfSA9IG9wdGlvbnNcblxuICBjb25zdCBnbG9iYWxDb25maWcgPSBwYXlsb2FkLmdsb2JhbHMuY29uZmlnLmZpbmQoKGNvbmZpZykgPT4gY29uZmlnLnNsdWcgPT09IGdsb2JhbFNsdWcpXG4gIGNvbnN0IGkxOG4gPSBpMThuSW5pdChwYXlsb2FkLmNvbmZpZy5pMThuKVxuXG4gIGlmICghZ2xvYmFsQ29uZmlnKSB7XG4gICAgdGhyb3cgbmV3IEFQSUVycm9yKGBUaGUgZ2xvYmFsIHdpdGggc2x1ZyAke1N0cmluZyhnbG9iYWxTbHVnKX0gY2FuJ3QgYmUgZm91bmQuYClcbiAgfVxuXG4gIGNvbnN0IHJlcSA9IHtcbiAgICBmYWxsYmFja0xvY2FsZSxcbiAgICBpMThuLFxuICAgIGxvY2FsZSxcbiAgICBwYXlsb2FkLFxuICAgIHBheWxvYWRBUEk6ICdsb2NhbCcsXG4gICAgdDogaTE4bi50LFxuICAgIHRyYW5zYWN0aW9uSUQ6IGluY29taW5nUmVxPy50cmFuc2FjdGlvbklELFxuICAgIHVzZXIsXG4gIH0gYXMgUGF5bG9hZFJlcXVlc3RcbiAgc2V0UmVxdWVzdENvbnRleHQocmVxLCBjb250ZXh0KVxuXG4gIGlmICghcmVxLnBheWxvYWREYXRhTG9hZGVyKSByZXEucGF5bG9hZERhdGFMb2FkZXIgPSBnZXREYXRhTG9hZGVyKHJlcSlcblxuICByZXR1cm4gZmluZFZlcnNpb25zKHtcbiAgICBkZXB0aCxcbiAgICBnbG9iYWxDb25maWcsXG4gICAgbGltaXQsXG4gICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgcGFnZSxcbiAgICByZXEsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICBzb3J0LFxuICAgIHdoZXJlLFxuICB9KVxufVxuIl0sIm5hbWVzIjpbImZpbmRWZXJzaW9uc0xvY2FsIiwicGF5bG9hZCIsIm9wdGlvbnMiLCJjb250ZXh0IiwiZGVwdGgiLCJmYWxsYmFja0xvY2FsZSIsImxpbWl0IiwibG9jYWxlIiwiY29uZmlnIiwibG9jYWxpemF0aW9uIiwiZGVmYXVsdExvY2FsZSIsIm92ZXJyaWRlQWNjZXNzIiwicGFnZSIsInJlcSIsImluY29taW5nUmVxIiwic2hvd0hpZGRlbkZpZWxkcyIsInNsdWciLCJnbG9iYWxTbHVnIiwic29ydCIsInVzZXIiLCJ3aGVyZSIsImdsb2JhbENvbmZpZyIsImdsb2JhbHMiLCJmaW5kIiwiaTE4biIsImkxOG5Jbml0IiwiQVBJRXJyb3IiLCJTdHJpbmciLCJwYXlsb2FkQVBJIiwidCIsInRyYW5zYWN0aW9uSUQiLCJzZXRSZXF1ZXN0Q29udGV4dCIsInBheWxvYWREYXRhTG9hZGVyIiwiZ2V0RGF0YUxvYWRlciIsImZpbmRWZXJzaW9ucyJdLCJtYXBwaW5ncyI6Ijs7OzsrQkE2QkE7OztlQUE4QkE7Ozs0QkF0QkE7d0JBQ0w7bUNBQ1M7c0JBQ1Q7cUVBQ0E7Ozs7OztBQWtCVixlQUFlQSxrQkFDNUJDLE9BQWdCLEVBQ2hCQyxPQUFtQjtJQUVuQixNQUFNLEVBQ0pDLE9BQU8sRUFDUEMsS0FBSyxFQUNMQyxpQkFBaUIsSUFBSSxFQUNyQkMsS0FBSyxFQUNMQyxTQUFTTixRQUFRTyxNQUFNLENBQUNDLFlBQVksR0FBR1IsUUFBUU8sTUFBTSxDQUFDQyxZQUFZLEVBQUVDLGdCQUFnQixJQUFJLEVBQ3hGQyxpQkFBaUIsSUFBSSxFQUNyQkMsSUFBSSxFQUNKQyxLQUFLQyxXQUFXLEVBQ2hCQyxnQkFBZ0IsRUFDaEJDLE1BQU1DLFVBQVUsRUFDaEJDLElBQUksRUFDSkMsSUFBSSxFQUNKQyxLQUFLLEVBQ04sR0FBR2xCO0lBRUosTUFBTW1CLGVBQWVwQixRQUFRcUIsT0FBTyxDQUFDZCxNQUFNLENBQUNlLElBQUksQ0FBQyxDQUFDZixTQUFXQSxPQUFPUSxJQUFJLEtBQUtDO0lBQzdFLE1BQU1PLE9BQU9DLElBQUFBLGNBQVEsRUFBQ3hCLFFBQVFPLE1BQU0sQ0FBQ2dCLElBQUk7SUFFekMsSUFBSSxDQUFDSCxjQUFjO1FBQ2pCLE1BQU0sSUFBSUssZ0JBQVEsQ0FBQyxDQUFDLHFCQUFxQixFQUFFQyxPQUFPVixZQUFZLGdCQUFnQixDQUFDO0lBQ2pGO0lBRUEsTUFBTUosTUFBTTtRQUNWUjtRQUNBbUI7UUFDQWpCO1FBQ0FOO1FBQ0EyQixZQUFZO1FBQ1pDLEdBQUdMLEtBQUtLLENBQUM7UUFDVEMsZUFBZWhCLGFBQWFnQjtRQUM1Qlg7SUFDRjtJQUNBWSxJQUFBQSxvQ0FBaUIsRUFBQ2xCLEtBQUtWO0lBRXZCLElBQUksQ0FBQ1UsSUFBSW1CLGlCQUFpQixFQUFFbkIsSUFBSW1CLGlCQUFpQixHQUFHQyxJQUFBQSx5QkFBYSxFQUFDcEI7SUFFbEUsT0FBT3FCLElBQUFBLHFCQUFZLEVBQUM7UUFDbEI5QjtRQUNBaUI7UUFDQWY7UUFDQUs7UUFDQUM7UUFDQUM7UUFDQUU7UUFDQUc7UUFDQUU7SUFDRjtBQUNGIn0=