"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return findOneLocal;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _findOne = /*#__PURE__*/ _interop_require_default(require("../findOne"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function findOneLocal(payload, options) {
    const { context, depth, draft = false, fallbackLocale = null, locale = payload.config.localization ? payload.config.localization?.defaultLocale : null, overrideAccess = true, showHiddenFields, slug: globalSlug, user } = options;
    const globalConfig = payload.globals.config.find((config)=>config.slug === globalSlug);
    const defaultLocale = payload?.config?.localization ? payload?.config?.localization?.defaultLocale : null;
    if (!globalConfig) {
        throw new _errors.APIError(`The global with slug ${String(globalSlug)} can't be found.`);
    }
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    const req = {
        fallbackLocale: fallbackLocale ?? options.req?.fallbackLocale ?? defaultLocale,
        i18n,
        locale: locale ?? options.req?.locale ?? defaultLocale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        user
    };
    (0, _setRequestContext.setRequestContext)(req, context);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _findOne.default)({
        depth,
        draft,
        globalConfig,
        overrideAccess,
        req,
        showHiddenFields,
        slug: globalSlug
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9nbG9iYWxzL29wZXJhdGlvbnMvbG9jYWwvZmluZE9uZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEdlbmVyYXRlZFR5cGVzLCBSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3MvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWQgfSBmcm9tICcuLi8uLi8uLi9wYXlsb2FkJ1xuaW1wb3J0IHR5cGUgeyBEb2N1bWVudCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJ1xuXG5pbXBvcnQgeyBnZXREYXRhTG9hZGVyIH0gZnJvbSAnLi4vLi4vLi4vY29sbGVjdGlvbnMvZGF0YWxvYWRlcidcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJ1xuaW1wb3J0IHsgc2V0UmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3NldFJlcXVlc3RDb250ZXh0J1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbnMvaW5pdCdcbmltcG9ydCBmaW5kT25lIGZyb20gJy4uL2ZpbmRPbmUnXG5cbmV4cG9ydCB0eXBlIE9wdGlvbnM8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydnbG9iYWxzJ10+ID0ge1xuICBjb250ZXh0PzogUmVxdWVzdENvbnRleHRcbiAgZGVwdGg/OiBudW1iZXJcbiAgZHJhZnQ/OiBib29sZWFuXG4gIGZhbGxiYWNrTG9jYWxlPzogc3RyaW5nXG4gIGxvY2FsZT86IHN0cmluZ1xuICBvdmVycmlkZUFjY2Vzcz86IGJvb2xlYW5cbiAgcmVxPzogUGF5bG9hZFJlcXVlc3RcbiAgc2hvd0hpZGRlbkZpZWxkcz86IGJvb2xlYW5cbiAgc2x1ZzogVFxuICB1c2VyPzogRG9jdW1lbnRcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZmluZE9uZUxvY2FsPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snZ2xvYmFscyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogT3B0aW9uczxUPixcbik6IFByb21pc2U8R2VuZXJhdGVkVHlwZXNbJ2dsb2JhbHMnXVtUXT4ge1xuICBjb25zdCB7XG4gICAgY29udGV4dCxcbiAgICBkZXB0aCxcbiAgICBkcmFmdCA9IGZhbHNlLFxuICAgIGZhbGxiYWNrTG9jYWxlID0gbnVsbCxcbiAgICBsb2NhbGUgPSBwYXlsb2FkLmNvbmZpZy5sb2NhbGl6YXRpb24gPyBwYXlsb2FkLmNvbmZpZy5sb2NhbGl6YXRpb24/LmRlZmF1bHRMb2NhbGUgOiBudWxsLFxuICAgIG92ZXJyaWRlQWNjZXNzID0gdHJ1ZSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgIHNsdWc6IGdsb2JhbFNsdWcsXG4gICAgdXNlcixcbiAgfSA9IG9wdGlvbnNcblxuICBjb25zdCBnbG9iYWxDb25maWcgPSBwYXlsb2FkLmdsb2JhbHMuY29uZmlnLmZpbmQoKGNvbmZpZykgPT4gY29uZmlnLnNsdWcgPT09IGdsb2JhbFNsdWcpXG4gIGNvbnN0IGRlZmF1bHRMb2NhbGUgPSBwYXlsb2FkPy5jb25maWc/LmxvY2FsaXphdGlvblxuICAgID8gcGF5bG9hZD8uY29uZmlnPy5sb2NhbGl6YXRpb24/LmRlZmF1bHRMb2NhbGVcbiAgICA6IG51bGxcblxuICBpZiAoIWdsb2JhbENvbmZpZykge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihgVGhlIGdsb2JhbCB3aXRoIHNsdWcgJHtTdHJpbmcoZ2xvYmFsU2x1Zyl9IGNhbid0IGJlIGZvdW5kLmApXG4gIH1cblxuICBjb25zdCBpMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcblxuICBjb25zdCByZXEgPSB7XG4gICAgZmFsbGJhY2tMb2NhbGU6IGZhbGxiYWNrTG9jYWxlID8/IG9wdGlvbnMucmVxPy5mYWxsYmFja0xvY2FsZSA/PyBkZWZhdWx0TG9jYWxlLFxuICAgIGkxOG4sXG4gICAgbG9jYWxlOiBsb2NhbGUgPz8gb3B0aW9ucy5yZXE/LmxvY2FsZSA/PyBkZWZhdWx0TG9jYWxlLFxuICAgIHBheWxvYWQsXG4gICAgcGF5bG9hZEFQSTogJ2xvY2FsJyxcbiAgICB0OiBpMThuLnQsXG4gICAgdXNlcixcbiAgfSBhcyBQYXlsb2FkUmVxdWVzdFxuICBzZXRSZXF1ZXN0Q29udGV4dChyZXEsIGNvbnRleHQpXG5cbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIHJldHVybiBmaW5kT25lKHtcbiAgICBkZXB0aCxcbiAgICBkcmFmdCxcbiAgICBnbG9iYWxDb25maWcsXG4gICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgcmVxLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgc2x1ZzogZ2xvYmFsU2x1ZyBhcyBzdHJpbmcsXG4gIH0pXG59XG4iXSwibmFtZXMiOlsiZmluZE9uZUxvY2FsIiwicGF5bG9hZCIsIm9wdGlvbnMiLCJjb250ZXh0IiwiZGVwdGgiLCJkcmFmdCIsImZhbGxiYWNrTG9jYWxlIiwibG9jYWxlIiwiY29uZmlnIiwibG9jYWxpemF0aW9uIiwiZGVmYXVsdExvY2FsZSIsIm92ZXJyaWRlQWNjZXNzIiwic2hvd0hpZGRlbkZpZWxkcyIsInNsdWciLCJnbG9iYWxTbHVnIiwidXNlciIsImdsb2JhbENvbmZpZyIsImdsb2JhbHMiLCJmaW5kIiwiQVBJRXJyb3IiLCJTdHJpbmciLCJpMThuIiwiaTE4bkluaXQiLCJyZXEiLCJwYXlsb2FkQVBJIiwidCIsInNldFJlcXVlc3RDb250ZXh0IiwicGF5bG9hZERhdGFMb2FkZXIiLCJnZXREYXRhTG9hZGVyIiwiZmluZE9uZSJdLCJtYXBwaW5ncyI6Ijs7OzsrQkF3QkE7OztlQUE4QkE7Ozs0QkFuQkE7d0JBQ0w7bUNBQ1M7c0JBQ1Q7Z0VBQ0w7Ozs7OztBQWVMLGVBQWVBLGFBQzVCQyxPQUFnQixFQUNoQkMsT0FBbUI7SUFFbkIsTUFBTSxFQUNKQyxPQUFPLEVBQ1BDLEtBQUssRUFDTEMsUUFBUSxLQUFLLEVBQ2JDLGlCQUFpQixJQUFJLEVBQ3JCQyxTQUFTTixRQUFRTyxNQUFNLENBQUNDLFlBQVksR0FBR1IsUUFBUU8sTUFBTSxDQUFDQyxZQUFZLEVBQUVDLGdCQUFnQixJQUFJLEVBQ3hGQyxpQkFBaUIsSUFBSSxFQUNyQkMsZ0JBQWdCLEVBQ2hCQyxNQUFNQyxVQUFVLEVBQ2hCQyxJQUFJLEVBQ0wsR0FBR2I7SUFFSixNQUFNYyxlQUFlZixRQUFRZ0IsT0FBTyxDQUFDVCxNQUFNLENBQUNVLElBQUksQ0FBQyxDQUFDVixTQUFXQSxPQUFPSyxJQUFJLEtBQUtDO0lBQzdFLE1BQU1KLGdCQUFnQlQsU0FBU08sUUFBUUMsZUFDbkNSLFNBQVNPLFFBQVFDLGNBQWNDLGdCQUMvQjtJQUVKLElBQUksQ0FBQ00sY0FBYztRQUNqQixNQUFNLElBQUlHLGdCQUFRLENBQUMsQ0FBQyxxQkFBcUIsRUFBRUMsT0FBT04sWUFBWSxnQkFBZ0IsQ0FBQztJQUNqRjtJQUVBLE1BQU1PLE9BQU9DLElBQUFBLGNBQVEsRUFBQ3JCLFFBQVFPLE1BQU0sQ0FBQ2EsSUFBSTtJQUV6QyxNQUFNRSxNQUFNO1FBQ1ZqQixnQkFBZ0JBLGtCQUFrQkosUUFBUXFCLEdBQUcsRUFBRWpCLGtCQUFrQkk7UUFDakVXO1FBQ0FkLFFBQVFBLFVBQVVMLFFBQVFxQixHQUFHLEVBQUVoQixVQUFVRztRQUN6Q1Q7UUFDQXVCLFlBQVk7UUFDWkMsR0FBR0osS0FBS0ksQ0FBQztRQUNUVjtJQUNGO0lBQ0FXLElBQUFBLG9DQUFpQixFQUFDSCxLQUFLcEI7SUFFdkIsSUFBSSxDQUFDb0IsSUFBSUksaUJBQWlCLEVBQUVKLElBQUlJLGlCQUFpQixHQUFHQyxJQUFBQSx5QkFBYSxFQUFDTDtJQUVsRSxPQUFPTSxJQUFBQSxnQkFBTyxFQUFDO1FBQ2J6QjtRQUNBQztRQUNBVztRQUNBTDtRQUNBWTtRQUNBWDtRQUNBQyxNQUFNQztJQUNSO0FBQ0YifQ==