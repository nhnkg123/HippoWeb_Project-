"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return restoreVersionLocal;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _restoreVersion = /*#__PURE__*/ _interop_require_default(require("../restoreVersion"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function restoreVersionLocal(payload, options) {
    const { id, context, depth, fallbackLocale = null, locale = payload.config.localization ? payload.config.localization?.defaultLocale : null, overrideAccess = true, req: incomingReq, showHiddenFields, slug: globalSlug, user } = options;
    const globalConfig = payload.globals.config.find((config)=>config.slug === globalSlug);
    const i18n = (0, _init.i18nInit)(payload.config.i18n);
    if (!globalConfig) {
        throw new _errors.APIError(`The global with slug ${String(globalSlug)} can't be found.`);
    }
    const req = {
        fallbackLocale,
        i18n,
        locale,
        payload,
        payloadAPI: 'local',
        t: i18n.t,
        transactionID: incomingReq?.transactionID,
        user
    };
    (0, _setRequestContext.setRequestContext)(req, context);
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    return (0, _restoreVersion.default)({
        id,
        depth,
        globalConfig,
        overrideAccess,
        req,
        showHiddenFields
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9nbG9iYWxzL29wZXJhdGlvbnMvbG9jYWwvcmVzdG9yZVZlcnNpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBHZW5lcmF0ZWRUeXBlcywgUmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi8nXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy90eXBlcydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZCB9IGZyb20gJy4uLy4uLy4uL3BheWxvYWQnXG5pbXBvcnQgdHlwZSB7IERvY3VtZW50IH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnXG5cbmltcG9ydCB7IGdldERhdGFMb2FkZXIgfSBmcm9tICcuLi8uLi8uLi9jb2xsZWN0aW9ucy9kYXRhbG9hZGVyJ1xuaW1wb3J0IHsgQVBJRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMnXG5pbXBvcnQgeyBzZXRSZXF1ZXN0Q29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2V4cHJlc3Mvc2V0UmVxdWVzdENvbnRleHQnXG5pbXBvcnQgeyBpMThuSW5pdCB9IGZyb20gJy4uLy4uLy4uL3RyYW5zbGF0aW9ucy9pbml0J1xuaW1wb3J0IHJlc3RvcmVWZXJzaW9uIGZyb20gJy4uL3Jlc3RvcmVWZXJzaW9uJ1xuXG5leHBvcnQgdHlwZSBPcHRpb25zPFQgZXh0ZW5kcyBrZXlvZiBHZW5lcmF0ZWRUeXBlc1snZ2xvYmFscyddPiA9IHtcbiAgY29udGV4dD86IFJlcXVlc3RDb250ZXh0XG4gIGRlcHRoPzogbnVtYmVyXG4gIGZhbGxiYWNrTG9jYWxlPzogc3RyaW5nXG4gIGlkOiBzdHJpbmdcbiAgbG9jYWxlPzogc3RyaW5nXG4gIG92ZXJyaWRlQWNjZXNzPzogYm9vbGVhblxuICByZXE/OiBQYXlsb2FkUmVxdWVzdFxuICBzaG93SGlkZGVuRmllbGRzPzogYm9vbGVhblxuICBzbHVnOiBzdHJpbmdcbiAgdXNlcj86IERvY3VtZW50XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHJlc3RvcmVWZXJzaW9uTG9jYWw8VCBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydnbG9iYWxzJ10+KFxuICBwYXlsb2FkOiBQYXlsb2FkLFxuICBvcHRpb25zOiBPcHRpb25zPFQ+LFxuKTogUHJvbWlzZTxHZW5lcmF0ZWRUeXBlc1snZ2xvYmFscyddW1RdPiB7XG4gIGNvbnN0IHtcbiAgICBpZCxcbiAgICBjb250ZXh0LFxuICAgIGRlcHRoLFxuICAgIGZhbGxiYWNrTG9jYWxlID0gbnVsbCxcbiAgICBsb2NhbGUgPSBwYXlsb2FkLmNvbmZpZy5sb2NhbGl6YXRpb24gPyBwYXlsb2FkLmNvbmZpZy5sb2NhbGl6YXRpb24/LmRlZmF1bHRMb2NhbGUgOiBudWxsLFxuICAgIG92ZXJyaWRlQWNjZXNzID0gdHJ1ZSxcbiAgICByZXE6IGluY29taW5nUmVxLFxuICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgc2x1ZzogZ2xvYmFsU2x1ZyxcbiAgICB1c2VyLFxuICB9ID0gb3B0aW9uc1xuXG4gIGNvbnN0IGdsb2JhbENvbmZpZyA9IHBheWxvYWQuZ2xvYmFscy5jb25maWcuZmluZCgoY29uZmlnKSA9PiBjb25maWcuc2x1ZyA9PT0gZ2xvYmFsU2x1ZylcbiAgY29uc3QgaTE4biA9IGkxOG5Jbml0KHBheWxvYWQuY29uZmlnLmkxOG4pXG5cbiAgaWYgKCFnbG9iYWxDb25maWcpIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoYFRoZSBnbG9iYWwgd2l0aCBzbHVnICR7U3RyaW5nKGdsb2JhbFNsdWcpfSBjYW4ndCBiZSBmb3VuZC5gKVxuICB9XG5cbiAgY29uc3QgcmVxID0ge1xuICAgIGZhbGxiYWNrTG9jYWxlLFxuICAgIGkxOG4sXG4gICAgbG9jYWxlLFxuICAgIHBheWxvYWQsXG4gICAgcGF5bG9hZEFQSTogJ2xvY2FsJyxcbiAgICB0OiBpMThuLnQsXG4gICAgdHJhbnNhY3Rpb25JRDogaW5jb21pbmdSZXE/LnRyYW5zYWN0aW9uSUQsXG4gICAgdXNlcixcbiAgfSBhcyBQYXlsb2FkUmVxdWVzdFxuICBzZXRSZXF1ZXN0Q29udGV4dChyZXEsIGNvbnRleHQpXG5cbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIHJldHVybiByZXN0b3JlVmVyc2lvbih7XG4gICAgaWQsXG4gICAgZGVwdGgsXG4gICAgZ2xvYmFsQ29uZmlnLFxuICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgIHJlcSxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICB9KVxufVxuIl0sIm5hbWVzIjpbInJlc3RvcmVWZXJzaW9uTG9jYWwiLCJwYXlsb2FkIiwib3B0aW9ucyIsImlkIiwiY29udGV4dCIsImRlcHRoIiwiZmFsbGJhY2tMb2NhbGUiLCJsb2NhbGUiLCJjb25maWciLCJsb2NhbGl6YXRpb24iLCJkZWZhdWx0TG9jYWxlIiwib3ZlcnJpZGVBY2Nlc3MiLCJyZXEiLCJpbmNvbWluZ1JlcSIsInNob3dIaWRkZW5GaWVsZHMiLCJzbHVnIiwiZ2xvYmFsU2x1ZyIsInVzZXIiLCJnbG9iYWxDb25maWciLCJnbG9iYWxzIiwiZmluZCIsImkxOG4iLCJpMThuSW5pdCIsIkFQSUVycm9yIiwiU3RyaW5nIiwicGF5bG9hZEFQSSIsInQiLCJ0cmFuc2FjdGlvbklEIiwic2V0UmVxdWVzdENvbnRleHQiLCJwYXlsb2FkRGF0YUxvYWRlciIsImdldERhdGFMb2FkZXIiLCJyZXN0b3JlVmVyc2lvbiJdLCJtYXBwaW5ncyI6Ijs7OzsrQkF3QkE7OztlQUE4QkE7Ozs0QkFuQkE7d0JBQ0w7bUNBQ1M7c0JBQ1Q7dUVBQ0U7Ozs7OztBQWVaLGVBQWVBLG9CQUM1QkMsT0FBZ0IsRUFDaEJDLE9BQW1CO0lBRW5CLE1BQU0sRUFDSkMsRUFBRSxFQUNGQyxPQUFPLEVBQ1BDLEtBQUssRUFDTEMsaUJBQWlCLElBQUksRUFDckJDLFNBQVNOLFFBQVFPLE1BQU0sQ0FBQ0MsWUFBWSxHQUFHUixRQUFRTyxNQUFNLENBQUNDLFlBQVksRUFBRUMsZ0JBQWdCLElBQUksRUFDeEZDLGlCQUFpQixJQUFJLEVBQ3JCQyxLQUFLQyxXQUFXLEVBQ2hCQyxnQkFBZ0IsRUFDaEJDLE1BQU1DLFVBQVUsRUFDaEJDLElBQUksRUFDTCxHQUFHZjtJQUVKLE1BQU1nQixlQUFlakIsUUFBUWtCLE9BQU8sQ0FBQ1gsTUFBTSxDQUFDWSxJQUFJLENBQUMsQ0FBQ1osU0FBV0EsT0FBT08sSUFBSSxLQUFLQztJQUM3RSxNQUFNSyxPQUFPQyxJQUFBQSxjQUFRLEVBQUNyQixRQUFRTyxNQUFNLENBQUNhLElBQUk7SUFFekMsSUFBSSxDQUFDSCxjQUFjO1FBQ2pCLE1BQU0sSUFBSUssZ0JBQVEsQ0FBQyxDQUFDLHFCQUFxQixFQUFFQyxPQUFPUixZQUFZLGdCQUFnQixDQUFDO0lBQ2pGO0lBRUEsTUFBTUosTUFBTTtRQUNWTjtRQUNBZTtRQUNBZDtRQUNBTjtRQUNBd0IsWUFBWTtRQUNaQyxHQUFHTCxLQUFLSyxDQUFDO1FBQ1RDLGVBQWVkLGFBQWFjO1FBQzVCVjtJQUNGO0lBQ0FXLElBQUFBLG9DQUFpQixFQUFDaEIsS0FBS1I7SUFFdkIsSUFBSSxDQUFDUSxJQUFJaUIsaUJBQWlCLEVBQUVqQixJQUFJaUIsaUJBQWlCLEdBQUdDLElBQUFBLHlCQUFhLEVBQUNsQjtJQUVsRSxPQUFPbUIsSUFBQUEsdUJBQWMsRUFBQztRQUNwQjVCO1FBQ0FFO1FBQ0FhO1FBQ0FQO1FBQ0FDO1FBQ0FFO0lBQ0Y7QUFDRiJ9