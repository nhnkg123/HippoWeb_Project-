"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _dataloader = require("../../../collections/dataloader");
const _errors = require("../../../errors");
const _setRequestContext = require("../../../express/setRequestContext");
const _init = require("../../../translations/init");
const _login = /*#__PURE__*/ _interop_require_default(require("../login"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function localLogin(payload, options) {
    const { collection: collectionSlug, context, data, depth, fallbackLocale, locale, overrideAccess = true, req = {}, res, showHiddenFields } = options;
    (0, _setRequestContext.setRequestContext)(req, context);
    const collection = payload.collections[collectionSlug];
    if (!collection) {
        throw new _errors.APIError(`The collection with slug ${String(collectionSlug)} can't be found. Login Operation.`);
    }
    req.payloadAPI = req.payloadAPI || 'local';
    req.payload = payload;
    req.i18n = (0, _init.i18nInit)(payload.config.i18n);
    req.locale = undefined;
    req.fallbackLocale = undefined;
    if (!req.t) req.t = req.i18n.t;
    if (!req.payloadDataLoader) req.payloadDataLoader = (0, _dataloader.getDataLoader)(req);
    const args = {
        collection,
        data,
        depth,
        overrideAccess,
        req,
        res,
        showHiddenFields
    };
    if (locale) args.req.locale = locale;
    if (fallbackLocale) args.req.fallbackLocale = fallbackLocale;
    return (0, _login.default)(args);
}
const _default = localLogin;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hdXRoL29wZXJhdGlvbnMvbG9jYWwvbG9naW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnXG5cbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QsIFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vZXhwcmVzcy90eXBlcydcbmltcG9ydCB0eXBlIHsgR2VuZXJhdGVkVHlwZXMgfSBmcm9tICcuLi8uLi8uLi9pbmRleCdcbmltcG9ydCB0eXBlIHsgUGF5bG9hZCB9IGZyb20gJy4uLy4uLy4uL3BheWxvYWQnXG5pbXBvcnQgdHlwZSB7IFJlc3VsdCB9IGZyb20gJy4uL2xvZ2luJ1xuXG5pbXBvcnQgeyBnZXREYXRhTG9hZGVyIH0gZnJvbSAnLi4vLi4vLi4vY29sbGVjdGlvbnMvZGF0YWxvYWRlcidcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJ1xuaW1wb3J0IHsgc2V0UmVxdWVzdENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9leHByZXNzL3NldFJlcXVlc3RDb250ZXh0J1xuaW1wb3J0IHsgaTE4bkluaXQgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbnMvaW5pdCdcbmltcG9ydCBsb2dpbiBmcm9tICcuLi9sb2dpbidcblxuZXhwb3J0IHR5cGUgT3B0aW9uczxUU2x1ZyBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPiA9IHtcbiAgY29sbGVjdGlvbjogVFNsdWdcbiAgY29udGV4dD86IFJlcXVlc3RDb250ZXh0XG4gIGRhdGE6IHtcbiAgICBlbWFpbDogc3RyaW5nXG4gICAgcGFzc3dvcmQ6IHN0cmluZ1xuICB9XG4gIGRlcHRoPzogbnVtYmVyXG4gIGZhbGxiYWNrTG9jYWxlPzogc3RyaW5nXG4gIGxvY2FsZT86IHN0cmluZ1xuICBvdmVycmlkZUFjY2Vzcz86IGJvb2xlYW5cbiAgcmVxPzogUGF5bG9hZFJlcXVlc3RcbiAgcmVzPzogUmVzcG9uc2VcbiAgc2hvd0hpZGRlbkZpZWxkcz86IGJvb2xlYW5cbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9jYWxMb2dpbjxUU2x1ZyBleHRlbmRzIGtleW9mIEdlbmVyYXRlZFR5cGVzWydjb2xsZWN0aW9ucyddPihcbiAgcGF5bG9hZDogUGF5bG9hZCxcbiAgb3B0aW9uczogT3B0aW9uczxUU2x1Zz4sXG4pOiBQcm9taXNlPFJlc3VsdCAmIHsgdXNlcjogR2VuZXJhdGVkVHlwZXNbJ2NvbGxlY3Rpb25zJ11bVFNsdWddIH0+IHtcbiAgY29uc3Qge1xuICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25TbHVnLFxuICAgIGNvbnRleHQsXG4gICAgZGF0YSxcbiAgICBkZXB0aCxcbiAgICBmYWxsYmFja0xvY2FsZSxcbiAgICBsb2NhbGUsXG4gICAgb3ZlcnJpZGVBY2Nlc3MgPSB0cnVlLFxuICAgIHJlcSA9IHt9IGFzIFBheWxvYWRSZXF1ZXN0LFxuICAgIHJlcyxcbiAgICBzaG93SGlkZGVuRmllbGRzLFxuICB9ID0gb3B0aW9uc1xuICBzZXRSZXF1ZXN0Q29udGV4dChyZXEsIGNvbnRleHQpXG5cbiAgY29uc3QgY29sbGVjdGlvbiA9IHBheWxvYWQuY29sbGVjdGlvbnNbY29sbGVjdGlvblNsdWddXG5cbiAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEFQSUVycm9yKFxuICAgICAgYFRoZSBjb2xsZWN0aW9uIHdpdGggc2x1ZyAke1N0cmluZyhjb2xsZWN0aW9uU2x1Zyl9IGNhbid0IGJlIGZvdW5kLiBMb2dpbiBPcGVyYXRpb24uYCxcbiAgICApXG4gIH1cblxuICByZXEucGF5bG9hZEFQSSA9IHJlcS5wYXlsb2FkQVBJIHx8ICdsb2NhbCdcbiAgcmVxLnBheWxvYWQgPSBwYXlsb2FkXG4gIHJlcS5pMThuID0gaTE4bkluaXQocGF5bG9hZC5jb25maWcuaTE4bilcbiAgcmVxLmxvY2FsZSA9IHVuZGVmaW5lZFxuICByZXEuZmFsbGJhY2tMb2NhbGUgPSB1bmRlZmluZWRcblxuICBpZiAoIXJlcS50KSByZXEudCA9IHJlcS5pMThuLnRcbiAgaWYgKCFyZXEucGF5bG9hZERhdGFMb2FkZXIpIHJlcS5wYXlsb2FkRGF0YUxvYWRlciA9IGdldERhdGFMb2FkZXIocmVxKVxuXG4gIGNvbnN0IGFyZ3MgPSB7XG4gICAgY29sbGVjdGlvbixcbiAgICBkYXRhLFxuICAgIGRlcHRoLFxuICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgIHJlcSxcbiAgICByZXMsXG4gICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgfVxuXG4gIGlmIChsb2NhbGUpIGFyZ3MucmVxLmxvY2FsZSA9IGxvY2FsZVxuICBpZiAoZmFsbGJhY2tMb2NhbGUpIGFyZ3MucmVxLmZhbGxiYWNrTG9jYWxlID0gZmFsbGJhY2tMb2NhbGVcblxuICByZXR1cm4gbG9naW48VFNsdWc+KGFyZ3MpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsTG9naW5cbiJdLCJuYW1lcyI6WyJsb2NhbExvZ2luIiwicGF5bG9hZCIsIm9wdGlvbnMiLCJjb2xsZWN0aW9uIiwiY29sbGVjdGlvblNsdWciLCJjb250ZXh0IiwiZGF0YSIsImRlcHRoIiwiZmFsbGJhY2tMb2NhbGUiLCJsb2NhbGUiLCJvdmVycmlkZUFjY2VzcyIsInJlcSIsInJlcyIsInNob3dIaWRkZW5GaWVsZHMiLCJzZXRSZXF1ZXN0Q29udGV4dCIsImNvbGxlY3Rpb25zIiwiQVBJRXJyb3IiLCJTdHJpbmciLCJwYXlsb2FkQVBJIiwiaTE4biIsImkxOG5Jbml0IiwiY29uZmlnIiwidW5kZWZpbmVkIiwidCIsInBheWxvYWREYXRhTG9hZGVyIiwiZ2V0RGF0YUxvYWRlciIsImFyZ3MiLCJsb2dpbiJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFnRkE7OztlQUFBOzs7NEJBekU4Qjt3QkFDTDttQ0FDUztzQkFDVDs4REFDUDs7Ozs7O0FBa0JsQixlQUFlQSxXQUNiQyxPQUFnQixFQUNoQkMsT0FBdUI7SUFFdkIsTUFBTSxFQUNKQyxZQUFZQyxjQUFjLEVBQzFCQyxPQUFPLEVBQ1BDLElBQUksRUFDSkMsS0FBSyxFQUNMQyxjQUFjLEVBQ2RDLE1BQU0sRUFDTkMsaUJBQWlCLElBQUksRUFDckJDLE1BQU0sQ0FBQyxDQUFtQixFQUMxQkMsR0FBRyxFQUNIQyxnQkFBZ0IsRUFDakIsR0FBR1g7SUFDSlksSUFBQUEsb0NBQWlCLEVBQUNILEtBQUtOO0lBRXZCLE1BQU1GLGFBQWFGLFFBQVFjLFdBQVcsQ0FBQ1gsZUFBZTtJQUV0RCxJQUFJLENBQUNELFlBQVk7UUFDZixNQUFNLElBQUlhLGdCQUFRLENBQ2hCLENBQUMseUJBQXlCLEVBQUVDLE9BQU9iLGdCQUFnQixpQ0FBaUMsQ0FBQztJQUV6RjtJQUVBTyxJQUFJTyxVQUFVLEdBQUdQLElBQUlPLFVBQVUsSUFBSTtJQUNuQ1AsSUFBSVYsT0FBTyxHQUFHQTtJQUNkVSxJQUFJUSxJQUFJLEdBQUdDLElBQUFBLGNBQVEsRUFBQ25CLFFBQVFvQixNQUFNLENBQUNGLElBQUk7SUFDdkNSLElBQUlGLE1BQU0sR0FBR2E7SUFDYlgsSUFBSUgsY0FBYyxHQUFHYztJQUVyQixJQUFJLENBQUNYLElBQUlZLENBQUMsRUFBRVosSUFBSVksQ0FBQyxHQUFHWixJQUFJUSxJQUFJLENBQUNJLENBQUM7SUFDOUIsSUFBSSxDQUFDWixJQUFJYSxpQkFBaUIsRUFBRWIsSUFBSWEsaUJBQWlCLEdBQUdDLElBQUFBLHlCQUFhLEVBQUNkO0lBRWxFLE1BQU1lLE9BQU87UUFDWHZCO1FBQ0FHO1FBQ0FDO1FBQ0FHO1FBQ0FDO1FBQ0FDO1FBQ0FDO0lBQ0Y7SUFFQSxJQUFJSixRQUFRaUIsS0FBS2YsR0FBRyxDQUFDRixNQUFNLEdBQUdBO0lBQzlCLElBQUlELGdCQUFnQmtCLEtBQUtmLEdBQUcsQ0FBQ0gsY0FBYyxHQUFHQTtJQUU5QyxPQUFPbUIsSUFBQUEsY0FBSyxFQUFRRDtBQUN0QjtNQUVBLFdBQWUxQiJ9