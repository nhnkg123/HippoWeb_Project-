"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    hasTransport: function() {
        return hasTransport;
    },
    hasTransportOptions: function() {
        return hasTransportOptions;
    }
});
function hasTransport(emailConfig) {
    return emailConfig.transport !== undefined;
}
function hasTransportOptions(emailConfig) {
    return emailConfig.transportOptions !== undefined;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25maWcvdHlwZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBFeHByZXNzLCBOZXh0RnVuY3Rpb24sIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcydcbmltcG9ydCB0eXBlIHsgT3B0aW9ucyBhcyBFeHByZXNzRmlsZVVwbG9hZE9wdGlvbnMgfSBmcm9tICdleHByZXNzLWZpbGV1cGxvYWQnXG5pbXBvcnQgdHlwZSBHcmFwaFFMIGZyb20gJ2dyYXBocWwnXG5pbXBvcnQgdHlwZSB7IEluaXRPcHRpb25zIGFzIGkxOG5Jbml0T3B0aW9ucyB9IGZyb20gJ2kxOG5leHQnXG5pbXBvcnQgdHlwZSB7IFRyYW5zcG9ydGVyIH0gZnJvbSAnbm9kZW1haWxlcidcbmltcG9ydCB0eXBlIFNNVFBDb25uZWN0aW9uIGZyb20gJ25vZGVtYWlsZXIvbGliL3NtdHAtY29ubmVjdGlvbidcbmltcG9ydCB0eXBlIHsgRGVzdGluYXRpb25TdHJlYW0sIExvZ2dlck9wdGlvbnMgfSBmcm9tICdwaW5vJ1xuaW1wb3J0IHR5cGUgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgdHlwZSB7IERlZXBSZXF1aXJlZCB9IGZyb20gJ3RzLWVzc2VudGlhbHMnXG4vLyBAdHMtZXhwZWN0LWVycm9yXG5pbXBvcnQgdHlwZSB7IElubGluZUNvbmZpZyB9IGZyb20gJ3ZpdGUnXG5pbXBvcnQgdHlwZSB7IENvbmZpZ3VyYXRpb24gfSBmcm9tICd3ZWJwYWNrJ1xuXG5pbXBvcnQgdHlwZSB7XG4gIERvY3VtZW50VGFiLFxuICBEb2N1bWVudFRhYkNvbXBvbmVudCxcbiAgRG9jdW1lbnRUYWJDb25maWcsXG59IGZyb20gJy4uL2FkbWluL2NvbXBvbmVudHMvZWxlbWVudHMvRG9jdW1lbnRIZWFkZXIvVGFicy90eXBlcydcbmltcG9ydCB0eXBlIHsgUmljaFRleHRBZGFwdGVyIH0gZnJvbSAnLi4vYWRtaW4vY29tcG9uZW50cy9mb3Jtcy9maWVsZC10eXBlcy9SaWNoVGV4dC90eXBlcydcbmltcG9ydCB0eXBlIHsgQ29udGV4dFR5cGUgfSBmcm9tICcuLi9hZG1pbi9jb21wb25lbnRzL3V0aWxpdGllcy9Eb2N1bWVudEluZm8vdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFVzZXIgfSBmcm9tICcuLi9hdXRoL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkQnVuZGxlciB9IGZyb20gJy4uL2J1bmRsZXJzL3R5cGVzJ1xuaW1wb3J0IHR5cGUge1xuICBBZnRlckVycm9ySG9vayxcbiAgQ29sbGVjdGlvbkNvbmZpZyxcbiAgU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZyxcbn0gZnJvbSAnLi4vY29sbGVjdGlvbnMvY29uZmlnL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBCYXNlRGF0YWJhc2VBZGFwdGVyIH0gZnJvbSAnLi4vZGF0YWJhc2UvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0IH0gZnJvbSAnLi4vZXhwcmVzcy90eXBlcydcbmltcG9ydCB0eXBlIHsgR2xvYmFsQ29uZmlnLCBTYW5pdGl6ZWRHbG9iYWxDb25maWcgfSBmcm9tICcuLi9nbG9iYWxzL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIHsgUGF5bG9hZCB9IGZyb20gJy4uL3BheWxvYWQnXG5pbXBvcnQgdHlwZSB7IFdoZXJlIH0gZnJvbSAnLi4vdHlwZXMnXG5cbnR5cGUgUHJldHRpZnk8VD4gPSB7XG4gIFtLIGluIGtleW9mIFRdOiBUW0tdXG59ICYgTm9uTnVsbGFibGU8dW5rbm93bj5cblxudHlwZSBFbWFpbCA9IHtcbiAgZnJvbUFkZHJlc3M6IHN0cmluZ1xuICBmcm9tTmFtZTogc3RyaW5nXG4gIGxvZ01vY2tDcmVkZW50aWFscz86IGJvb2xlYW5cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG5leHBvcnQgdHlwZSBQbHVnaW4gPSAoY29uZmlnOiBDb25maWcpID0+IENvbmZpZyB8IFByb21pc2U8Q29uZmlnPlxuXG5leHBvcnQgdHlwZSBMaXZlUHJldmlld0NvbmZpZyA9IHtcbiAgLyoqXG4gICBEZXZpY2UgYnJlYWtwb2ludHMgdG8gdXNlIGZvciB0aGUgYGlmcmFtZWAgb2YgdGhlIExpdmUgUHJldmlldyB3aW5kb3cuXG4gICBPcHRpb25zIGFyZSBkaXNwbGF5ZWQgaW4gdGhlIExpdmUgUHJldmlldyB0b29sYmFyLlxuICAgVGhlIGByZXNwb25zaXZlYCBicmVha3BvaW50IGlzIGluY2x1ZGVkIGJ5IGRlZmF1bHQuXG4gICAqL1xuICBicmVha3BvaW50cz86IHtcbiAgICBoZWlnaHQ6IG51bWJlciB8IHN0cmluZ1xuICAgIGxhYmVsOiBzdHJpbmdcbiAgICBuYW1lOiBzdHJpbmdcbiAgICB3aWR0aDogbnVtYmVyIHwgc3RyaW5nXG4gIH1bXVxuICAvKipcbiAgIFRoZSBVUkwgb2YgdGhlIGZyb250ZW5kIGFwcGxpY2F0aW9uLiBUaGlzIHdpbGwgYmUgcmVuZGVyZWQgd2l0aGluIGFuIGBpZnJhbWVgIGFzIGl0cyBgc3JjYC5cbiAgIFBheWxvYWQgd2lsbCBzZW5kIGEgYHdpbmRvdy5wb3N0TWVzc2FnZSgpYCB0byB0aGlzIFVSTCB3aXRoIHRoZSBkb2N1bWVudCBkYXRhIGluIHJlYWwtdGltZS5cbiAgIFRoZSBmcm9udGVuZCBhcHBsaWNhdGlvbiBpcyByZXNwb25zaWJsZSBmb3IgcmVjZWl2aW5nIHRoZSBtZXNzYWdlIGFuZCB1cGRhdGluZyB0aGUgVUkgYWNjb3JkaW5nbHkuXG4gICBVc2UgdGhlIGB1c2VMaXZlUHJldmlld2AgaG9vayB0byBnZXQgc3RhcnRlZCBpbiBSZWFjdCBhcHBsaWNhdGlvbnMuXG4gICAqL1xuICB1cmw/OlxuICAgIHwgKChhcmdzOiB7XG4gICAgICAgIGRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT5cbiAgICAgICAgZG9jdW1lbnRJbmZvOiBDb250ZXh0VHlwZVxuICAgICAgICBsb2NhbGU6IExvY2FsZVxuICAgICAgfSkgPT4gUHJvbWlzZTxzdHJpbmc+IHwgc3RyaW5nKVxuICAgIHwgc3RyaW5nXG59XG5cbnR5cGUgR2VuZXJhdGVQcmV2aWV3VVJMT3B0aW9ucyA9IHtcbiAgbG9jYWxlOiBzdHJpbmdcbiAgdG9rZW46IHN0cmluZ1xufVxuXG5leHBvcnQgdHlwZSBHZW5lcmF0ZVByZXZpZXdVUkwgPSAoXG4gIGRvYzogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4gIG9wdGlvbnM6IEdlbmVyYXRlUHJldmlld1VSTE9wdGlvbnMsXG4pID0+IFByb21pc2U8bnVsbCB8IHN0cmluZz4gfCBudWxsIHwgc3RyaW5nXG5cbmV4cG9ydCB0eXBlIEVtYWlsVHJhbnNwb3J0ID0gRW1haWwgJiB7XG4gIHRyYW5zcG9ydDogVHJhbnNwb3J0ZXJcbiAgdHJhbnNwb3J0T3B0aW9ucz86IFNNVFBDb25uZWN0aW9uLk9wdGlvbnNcbn1cblxuZXhwb3J0IHR5cGUgRW1haWxUcmFuc3BvcnRPcHRpb25zID0gRW1haWwgJiB7XG4gIHRyYW5zcG9ydD86IFRyYW5zcG9ydGVyXG4gIHRyYW5zcG9ydE9wdGlvbnM6IFNNVFBDb25uZWN0aW9uLk9wdGlvbnNcbn1cblxuZXhwb3J0IHR5cGUgRW1haWxPcHRpb25zID0gRW1haWwgfCBFbWFpbFRyYW5zcG9ydCB8IEVtYWlsVHJhbnNwb3J0T3B0aW9uc1xuXG4vKipcbiAqIHR5cGUgZ3VhcmQgZm9yIEVtYWlsT3B0aW9uc1xuICogQHBhcmFtIGVtYWlsQ29uZmlnXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNUcmFuc3BvcnQoZW1haWxDb25maWc6IEVtYWlsT3B0aW9ucyk6IGVtYWlsQ29uZmlnIGlzIEVtYWlsVHJhbnNwb3J0IHtcbiAgcmV0dXJuIChlbWFpbENvbmZpZyBhcyBFbWFpbFRyYW5zcG9ydCkudHJhbnNwb3J0ICE9PSB1bmRlZmluZWRcbn1cblxuLyoqXG4gKiB0eXBlIGd1YXJkIGZvciBFbWFpbE9wdGlvbnNcbiAqIEBwYXJhbSBlbWFpbENvbmZpZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzVHJhbnNwb3J0T3B0aW9ucyhcbiAgZW1haWxDb25maWc6IEVtYWlsT3B0aW9ucyxcbik6IGVtYWlsQ29uZmlnIGlzIEVtYWlsVHJhbnNwb3J0T3B0aW9ucyB7XG4gIHJldHVybiAoZW1haWxDb25maWcgYXMgRW1haWxUcmFuc3BvcnRPcHRpb25zKS50cmFuc3BvcnRPcHRpb25zICE9PSB1bmRlZmluZWRcbn1cblxuZXhwb3J0IHR5cGUgR3JhcGhRTEV4dGVuc2lvbiA9IChcbiAgZ3JhcGhRTDogdHlwZW9mIEdyYXBoUUwsXG4gIHBheWxvYWQ6IFBheWxvYWQsXG4pID0+IFJlY29yZDxzdHJpbmcsIHVua25vd24+XG5cbmV4cG9ydCB0eXBlIEluaXRPcHRpb25zID0ge1xuICAvKipcbiAgICogU29tZXRpbWVzLCB3aXRoIHRoZSBsb2NhbCBBUEksIHlvdSBtaWdodCBuZWVkIHRvIHBhc3MgYSBjb25maWcgZmlsZSBkaXJlY3RseSwgZm9yIGV4YW1wbGUsIHNlcnZlcmxlc3Mgb24gVmVyY2VsXG4gICAqIFRoZSBwYXNzZWQgY29uZmlnIHNob3VsZCBtYXRjaCB0aGUgY29uZmlnIGZpbGUsIGFuZCBpZiBpdCBkb2Vzbid0LCB0aGVyZSBjb3VsZCBiZSBtaXNtYXRjaGVzIGJldHdlZW4gdGhlIGFkbWluIFVJXG4gICAqIGFuZCB0aGUgYmFja2VuZCBmdW5jdGlvbmFsaXR5XG4gICAqL1xuICBjb25maWc/OiBQcm9taXNlPFNhbml0aXplZENvbmZpZz5cblxuICAvKipcbiAgICogRGlzYWJsZSBjb25uZWN0IHRvIHRoZSBkYXRhYmFzZSBvbiBpbml0XG4gICAqL1xuICBkaXNhYmxlREJDb25uZWN0PzogYm9vbGVhblxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHJ1bm5pbmcgb2YgdGhlIGBvbkluaXRgIGZ1bmN0aW9uXG4gICAqL1xuICBkaXNhYmxlT25Jbml0PzogYm9vbGVhblxuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIGZvciBQYXlsb2FkJ3MgZW1haWwgZnVuY3Rpb25hbGl0eVxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vcGF5bG9hZGNtcy5jb20vZG9jcy9lbWFpbC9vdmVydmlld1xuICAgKi9cbiAgZW1haWw/OiBFbWFpbE9wdGlvbnNcblxuICAvKiogRXhwcmVzcyBhcHAgZm9yIFBheWxvYWQgdG8gdXNlICovXG4gIGV4cHJlc3M/OiBFeHByZXNzXG5cbiAgLyoqXG4gICAqIE1ha2UgUGF5bG9hZCBzdGFydCBpbiBsb2NhbC1vbmx5IG1vZGUuXG4gICAqXG4gICAqIFRoaXMgd2lsbCBieXBhc3Mgc2V0dGluZyB1cCBSRVNUIGFuZCBHcmFwaFFMIEFQSSByb3V0ZXMuXG4gICAqIEV4cHJlc3Mgd2lsbCBub3QgYmUgcmVxdWlyZWQgaWYgc2V0IHRvIGB0cnVlYC5cbiAgICovXG4gIGxvY2FsPzogYm9vbGVhblxuXG4gIGxvZ2dlckRlc3RpbmF0aW9uPzogRGVzdGluYXRpb25TdHJlYW1cbiAgLyoqXG4gICAqIFNwZWNpZnkgb3B0aW9ucyBmb3IgdGhlIGJ1aWx0LWluIFBpbm8gbG9nZ2VyIHRoYXQgUGF5bG9hZCB1c2VzIGZvciBpbnRlcm5hbCBsb2dnaW5nLlxuICAgKlxuICAgKiBTZWUgUGlubyBEb2NzIGZvciBvcHRpb25zOiBodHRwczovL2dldHBpbm8uaW8vIy9kb2NzL2FwaT9pZD1vcHRpb25zXG4gICAqL1xuICBsb2dnZXJPcHRpb25zPzogTG9nZ2VyT3B0aW9uc1xuXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIGltbWVkaWF0ZWx5IGZvbGxvd2luZyBzdGFydHVwIHRoYXQgcmVjZWl2ZXMgdGhlIFBheWxvYWQgaW5zdGFuY2UgYXMgaXQncyBvbmx5IGFyZ3VtZW50LlxuICAgKi9cbiAgb25Jbml0PzogKHBheWxvYWQ6IFBheWxvYWQpID0+IFByb21pc2U8dm9pZD4gfCB2b2lkXG5cbiAgLyoqIFNlY3VyZSBzdHJpbmcgdGhhdCBQYXlsb2FkIHdpbGwgdXNlIGZvciBhbnkgZW5jcnlwdGlvbiB3b3JrZmxvd3MgKi9cbiAgc2VjcmV0OiBzdHJpbmdcbn1cblxuLyoqXG4gKiBUaGlzIHJlc3VsdCBpcyBjYWxjdWxhdGVkIG9uIHRoZSBzZXJ2ZXJcbiAqIGFuZCB0aGVuIHNlbnQgdG8gdGhlIGNsaWVudCBhbGxvd2luZyB0aGUgZGFzaGJvYXJkIHRvIHNob3cgYWNjZXNzaWJsZSBkYXRhIGFuZCBhY3Rpb25zLlxuICpcbiAqIElmIHRoZSByZXN1bHQgaXMgYHRydWVgLCB0aGUgdXNlciBoYXMgYWNjZXNzLlxuICogSWYgdGhlIHJlc3VsdCBpcyBhbiBvYmplY3QsIGl0IGlzIGludGVycHJldGVkIGFzIGEgTW9uZ29EQiBxdWVyeS5cbiAqXG4gKiBAZXhhbXBsZSBgeyBjcmVhdGVkQnk6IHsgZXF1YWxzOiBpZCB9IH1gXG4gKlxuICogQGV4YW1wbGUgYHsgdGVuYW50OiB7IGluOiB0ZW5hbnRJZHMgfSB9YFxuICpcbiAqIEBzZWUgaHR0cHM6Ly9wYXlsb2FkY21zLmNvbS9kb2NzL2FjY2Vzcy1jb250cm9sL292ZXJ2aWV3XG4gKi9cbmV4cG9ydCB0eXBlIEFjY2Vzc1Jlc3VsdCA9IFdoZXJlIHwgYm9vbGVhblxuXG5leHBvcnQgdHlwZSBBY2Nlc3NBcmdzPFQgPSBhbnksIFUgPSBhbnk+ID0ge1xuICAvKipcbiAgICogVGhlIHJlbGV2YW50IHJlc291cmNlIHRoYXQgaXMgYmVpbmcgYWNjZXNzZWQuXG4gICAqXG4gICAqIGBkYXRhYCBpcyBudWxsIHdoZW4gYSBsaXN0IGlzIHJlcXVlc3RlZFxuICAgKi9cbiAgZGF0YT86IFRcbiAgLyoqIElEIG9mIHRoZSByZXNvdXJjZSBiZWluZyBhY2Nlc3NlZCAqL1xuICBpZD86IG51bWJlciB8IHN0cmluZ1xuICAvKiogVGhlIG9yaWdpbmFsIHJlcXVlc3QgdGhhdCByZXF1aXJlcyBhbiBhY2Nlc3MgY2hlY2sgKi9cbiAgcmVxOiBQYXlsb2FkUmVxdWVzdDxVPlxufVxuXG4vKipcbiAqIEFjY2VzcyBmdW5jdGlvbiBydW5zIG9uIHRoZSBzZXJ2ZXJcbiAqIGFuZCBpcyBzZW50IHRvIHRoZSBjbGllbnQgYWxsb3dpbmcgdGhlIGRhc2hib2FyZCB0byBzaG93IGFjY2Vzc2libGUgZGF0YSBhbmQgYWN0aW9ucy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcGF5bG9hZGNtcy5jb20vZG9jcy9hY2Nlc3MtY29udHJvbC9vdmVydmlld1xuICovXG5leHBvcnQgdHlwZSBBY2Nlc3M8VCA9IGFueSwgVSA9IGFueT4gPSAoXG4gIGFyZ3M6IEFjY2Vzc0FyZ3M8VCwgVT4sXG4pID0+IEFjY2Vzc1Jlc3VsdCB8IFByb21pc2U8QWNjZXNzUmVzdWx0PlxuXG4vKiogRXF1aXZhbGVudCB0byBleHByZXNzIG1pZGRsZXdhcmUsIGJ1dCB3aXRoIGFuIGVuaGFuY2VkIHJlcXVlc3Qgb2JqZWN0ICovXG5leHBvcnQgaW50ZXJmYWNlIFBheWxvYWRIYW5kbGVyIHtcbiAgKHJlcTogUGF5bG9hZFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbik6IHZvaWRcbn1cblxuLyoqXG4gKiBEb2NzOiBodHRwczovL3BheWxvYWRjbXMuY29tL2RvY3MvcmVzdC1hcGkvb3ZlcnZpZXcjY3VzdG9tLWVuZHBvaW50c1xuICovXG5leHBvcnQgdHlwZSBFbmRwb2ludCA9IHtcbiAgLyoqIEV4dGVuc2lvbiBwb2ludCB0byBhZGQgeW91ciBjdXN0b20gZGF0YS4gKi9cbiAgY3VzdG9tPzogUmVjb3JkPHN0cmluZywgYW55PlxuICAvKipcbiAgICogTWlkZGxld2FyZSB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIHBhdGgvbWV0aG9kIG1hdGNoZXNcbiAgICpcbiAgICogQ29tcGF0aWJsZSB3aXRoIEV4cHJlc3MgbWlkZGxld2FyZVxuICAgKi9cbiAgaGFuZGxlcjogUGF5bG9hZEhhbmRsZXIgfCBQYXlsb2FkSGFuZGxlcltdXG4gIC8qKiBIVFRQIG1ldGhvZCAob3IgXCJhbGxcIikgKi9cbiAgbWV0aG9kOiAnY29ubmVjdCcgfCAnZGVsZXRlJyB8ICdnZXQnIHwgJ2hlYWQnIHwgJ29wdGlvbnMnIHwgJ3BhdGNoJyB8ICdwb3N0JyB8ICdwdXQnXG4gIC8qKlxuICAgKiBQYXR0ZXJuIHRoYXQgc2hvdWxkIG1hdGNoIHRoZSBwYXRoIG9mIHRoZSBpbmNvbWluZyByZXF1ZXN0XG4gICAqXG4gICAqIENvbXBhdGlibGUgd2l0aCB0aGUgRXhwcmVzcyByb3V0ZXJcbiAgICovXG4gIHBhdGg6IHN0cmluZ1xuICAvKipcbiAgICogU2V0IHRvIGB0cnVlYCB0byBkaXNhYmxlIHRoZSBQYXlsb2FkIG1pZGRsZXdhcmUgZm9yIHRoaXMgZW5kcG9pbnRcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJvb3Q/OiBib29sZWFuXG59XG5cbmV4cG9ydCB0eXBlIEFkbWluVmlld0NvbmZpZyA9IHtcbiAgQ29tcG9uZW50OiBBZG1pblZpZXdDb21wb25lbnRcbiAgLyoqIFdoZXRoZXIgdGhlIHBhdGggc2hvdWxkIGJlIG1hdGNoZWQgZXhhY3RseSBvciBhcyBhIHByZWZpeCAqL1xuICBleGFjdD86IGJvb2xlYW5cbiAgcGF0aDogc3RyaW5nXG4gIHNlbnNpdGl2ZT86IGJvb2xlYW5cbiAgc3RyaWN0PzogYm9vbGVhblxufVxuXG5leHBvcnQgdHlwZSBBZG1pblZpZXdQcm9wcyA9IHtcbiAgY2FuQWNjZXNzQWRtaW4/OiBib29sZWFuXG4gIHVzZXI6IFVzZXIgfCBudWxsIHwgdW5kZWZpbmVkXG59XG5cbmV4cG9ydCB0eXBlIEFkbWluVmlld0NvbXBvbmVudCA9IFJlYWN0LkNvbXBvbmVudFR5cGU8QWRtaW5WaWV3UHJvcHM+XG5cbmV4cG9ydCB0eXBlIEFkbWluVmlldyA9IEFkbWluVmlld0NvbXBvbmVudCB8IEFkbWluVmlld0NvbmZpZ1xuXG5leHBvcnQgdHlwZSBFZGl0Vmlld0NvbmZpZyA9XG4gIHwge1xuICAgICAgLyoqXG4gICAgICAgKiBBZGQgYSBuZXcgRWRpdCB2aWV3IHRvIHRoZSBhZG1pbiBwYW5lbFxuICAgICAgICogaS5lLiB5b3UgY2FuIHJlbmRlciBhIGN1c3RvbSB2aWV3IHRoYXQgaGFzIG5vIHRhYiwgaWYgZGVzaXJlZFxuICAgICAgICogT3Igb3ZlcnJpZGUgYSBzcGVjaWZpYyBwcm9wZXJ0aWVzIG9mIGFuIGV4aXN0aW5nIG9uZVxuICAgICAgICogaS5lLiB5b3UgY2FuIGN1c3RvbWl6ZSB0aGUgYERlZmF1bHRgIHZpZXcgdGFiIGxhYmVsLCBpZiBkZXNpcmVkXG4gICAgICAgKi9cbiAgICAgIFRhYj86IERvY3VtZW50VGFiXG4gICAgICBwYXRoPzogc3RyaW5nXG4gICAgfVxuICB8IHtcbiAgICAgIENvbXBvbmVudDogQWRtaW5WaWV3Q29tcG9uZW50XG4gICAgICBwYXRoOiBzdHJpbmdcbiAgICB9XG4gIHwge1xuICAgICAgYWN0aW9ucz86IFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PltdXG4gICAgfVxuXG4vKipcbiAqIE92ZXJyaWRlIGV4aXN0aW5nIHZpZXdzXG4gKiBpLmUuIERhc2hib2FyZCwgQWNjb3VudCwgQVBJLCBMaXZlUHJldmlldywgZXRjLlxuICogUGF0aCBpcyBub3QgYXZhaWxhYmxlIGhlcmVcbiAqIEFsbCBUYWIgcHJvcGVydGllcyBiZWNvbWUgb3B0aW9uYWxcbiAqIGkuZS4geW91IGNhbiBjaGFuZ2UganVzdCB0aGUgbGFiZWwsIGlmIGRlc2lyZWRcbiAqL1xuZXhwb3J0IHR5cGUgRWRpdFZpZXcgPSBBZG1pblZpZXdDb21wb25lbnQgfCBFZGl0Vmlld0NvbmZpZ1xuXG5leHBvcnQgdHlwZSBMb2NhbGUgPSB7XG4gIC8qKlxuICAgKiB2YWx1ZSBvZiBzdXBwb3J0ZWQgbG9jYWxlXG4gICAqIEBleGFtcGxlIFwiZW5cIlxuICAgKi9cbiAgY29kZTogc3RyaW5nXG4gIC8qKlxuICAgKiBsYWJlbCBvZiBzdXBwb3J0ZWQgbG9jYWxlXG4gICAqIEBleGFtcGxlIFwiRW5nbGlzaFwiXG4gICAqL1xuICBsYWJlbDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IHN0cmluZ1xuICAvKipcbiAgICogaWYgdHJ1ZSwgZGVmYXVsdHMgdGV4dEFsaWdtbmVudCBvbiB0ZXh0IGZpZWxkcyB0byBSVExcbiAgICovXG4gIHJ0bD86IGJvb2xlYW5cbn1cblxuZXhwb3J0IHR5cGUgQmFzZUxvY2FsaXphdGlvbkNvbmZpZyA9IHtcbiAgLyoqXG4gICAqIExvY2FsZSBmb3IgdXNlcnMgdGhhdCBoYXZlIG5vdCBleHByZXNzZWQgdGhlaXIgcHJlZmVyZW5jZSBmb3IgYSBzcGVjaWZpYyBsb2NhbGVcbiAgICogQGV4YW1wbGUgYFwiZW5cImBcbiAgICovXG4gIGRlZmF1bHRMb2NhbGU6IHN0cmluZ1xuICAvKiogU2V0IHRvIGB0cnVlYCB0byBsZXQgbWlzc2luZyB2YWx1ZXMgaW4gbG9jYWxpc2VkIGZpZWxkcyBmYWxsIGJhY2sgdG8gdGhlIHZhbHVlcyBpbiBgZGVmYXVsdExvY2FsZWAgKi9cbiAgZmFsbGJhY2s/OiBib29sZWFuXG59XG5cbmV4cG9ydCB0eXBlIExvY2FsaXphdGlvbkNvbmZpZ1dpdGhOb0xhYmVscyA9IFByZXR0aWZ5PFxuICBCYXNlTG9jYWxpemF0aW9uQ29uZmlnICYge1xuICAgIC8qKlxuICAgICAqIExpc3Qgb2Ygc3VwcG9ydGVkIGxvY2FsZXNcbiAgICAgKiBAZXhhbXBsZSBgW1wiZW5cIiwgXCJlc1wiLCBcImZyXCIsIFwibmxcIiwgXCJkZVwiLCBcImpwXCJdYFxuICAgICAqL1xuICAgIGxvY2FsZXM6IHN0cmluZ1tdXG4gIH1cbj5cblxuZXhwb3J0IHR5cGUgTG9jYWxpemF0aW9uQ29uZmlnV2l0aExhYmVscyA9IFByZXR0aWZ5PFxuICBCYXNlTG9jYWxpemF0aW9uQ29uZmlnICYge1xuICAgIC8qKlxuICAgICAqIExpc3Qgb2Ygc3VwcG9ydGVkIGxvY2FsZXMgd2l0aCBsYWJlbHNcbiAgICAgKiBAZXhhbXBsZSB7XG4gICAgICogIGxhYmVsOiAnRW5nbGlzaCcsXG4gICAgICogIHZhbHVlOiAnZW4nLFxuICAgICAqICBydGw6IGZhbHNlXG4gICAgICogfVxuICAgICAqL1xuICAgIGxvY2FsZXM6IExvY2FsZVtdXG4gIH1cbj5cblxuZXhwb3J0IHR5cGUgU2FuaXRpemVkTG9jYWxpemF0aW9uQ29uZmlnID0gUHJldHRpZnk8XG4gIExvY2FsaXphdGlvbkNvbmZpZ1dpdGhMYWJlbHMgJiB7XG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBzdXBwb3J0ZWQgbG9jYWxlc1xuICAgICAqIEBleGFtcGxlIGBbXCJlblwiLCBcImVzXCIsIFwiZnJcIiwgXCJubFwiLCBcImRlXCIsIFwianBcIl1gXG4gICAgICovXG4gICAgbG9jYWxlQ29kZXM6IHN0cmluZ1tdXG4gIH1cbj5cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vcGF5bG9hZGNtcy5jb20vZG9jcy9jb25maWd1cmF0aW9uL2xvY2FsaXphdGlvbiNsb2NhbGl6YXRpb25cbiAqL1xuZXhwb3J0IHR5cGUgTG9jYWxpemF0aW9uQ29uZmlnID0gUHJldHRpZnk8XG4gIExvY2FsaXphdGlvbkNvbmZpZ1dpdGhMYWJlbHMgfCBMb2NhbGl6YXRpb25Db25maWdXaXRoTm9MYWJlbHNcbj5cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjZW50cmFsIGNvbmZpZ3VyYXRpb25cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcGF5bG9hZGNtcy5jb20vZG9jcy9jb25maWd1cmF0aW9uL292ZXJ2aWV3XG4gKi9cbmV4cG9ydCB0eXBlIENvbmZpZyA9IHtcbiAgLyoqIENvbmZpZ3VyZSBhZG1pbiBkYXNoYm9hcmQgKi9cbiAgYWRtaW4/OiB7XG4gICAgLyoqIEF1dG9tYXRpY2FsbHkgbG9nIGluIGFzIGEgdXNlciB3aGVuIHZpc2l0aW5nIHRoZSBhZG1pbiBkYXNoYm9hcmQuICovXG4gICAgYXV0b0xvZ2luPzpcbiAgICAgIHwge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFRoZSBlbWFpbCBhZGRyZXNzIG9mIHRoZSB1c2VyIHRvIGxvZ2luIGFzXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBlbWFpbDogc3RyaW5nXG4gICAgICAgICAgLyoqIFRoZSBwYXNzd29yZCBvZiB0aGUgdXNlciB0byBsb2dpbiBhcyAqL1xuICAgICAgICAgIHBhc3N3b3JkOiBzdHJpbmdcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIGxvZ2luIGNyZWRlbnRpYWxzIHdpbGwgYmUgcHJlZmlsbGVkIGJ1dCB0aGUgdXNlciB3aWxsIHN0aWxsIG5lZWQgdG8gY2xpY2sgdGhlIGxvZ2luIGJ1dHRvbi5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAgICovXG4gICAgICAgICAgcHJlZmlsbE9ubHk/OiBib29sZWFuXG4gICAgICAgIH1cbiAgICAgIHwgZmFsc2VcblxuICAgIC8qKiBTZXQgYWNjb3VudCBwcm9maWxlIHBpY3R1cmUuIE9wdGlvbnM6IGdyYXZhdGFyLCBkZWZhdWx0IG9yIGEgY3VzdG9tIFJlYWN0IGNvbXBvbmVudC4gKi9cbiAgICBhdmF0YXI/OiAnZGVmYXVsdCcgfCAnZ3JhdmF0YXInIHwgUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSBhbiBhYnNvbHV0ZSBwYXRoIGZvciB3aGVyZSB0byBzdG9yZSB0aGUgYnVpbHQgQWRtaW4gcGFuZWwgYnVuZGxlIHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IFwiL2J1aWxkXCJcbiAgICAgKiAqL1xuICAgIGJ1aWxkUGF0aD86IHN0cmluZ1xuICAgIC8qKiBDdXN0b21pemUgdGhlIGJ1bmRsZXIgdXNlZCB0byBydW4geW91ciBhZG1pbiBwYW5lbC4gKi9cbiAgICBidW5kbGVyPzogUGF5bG9hZEJ1bmRsZXJcbiAgICAvKipcbiAgICAgKiBBZGQgZXh0cmEgYW5kL29yIHJlcGxhY2UgYnVpbHQtaW4gY29tcG9uZW50cyB3aXRoIGN1c3RvbSBjb21wb25lbnRzXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vcGF5bG9hZGNtcy5jb20vZG9jcy9hZG1pbi9jb21wb25lbnRzXG4gICAgICovXG4gICAgY29tcG9uZW50cz86IHtcbiAgICAgIC8qKlxuICAgICAgICogUmVwbGFjZSB0aGUgbmF2aWdhdGlvbiB3aXRoIGEgY3VzdG9tIGNvbXBvbmVudFxuICAgICAgICovXG4gICAgICBOYXY/OiBSZWFjdC5Db21wb25lbnRUeXBlPGFueT5cbiAgICAgIC8qKlxuICAgICAgICogQWRkIGN1c3RvbSBjb21wb25lbnRzIHRvIHRoZSB0b3AgcmlnaHQgb2YgdGhlIEFkbWluIFBhbmVsXG4gICAgICAgKi9cbiAgICAgIGFjdGlvbnM/OiBSZWFjdC5Db21wb25lbnRUeXBlPGFueT5bXVxuICAgICAgLyoqXG4gICAgICAgKiBBZGQgY3VzdG9tIGNvbXBvbmVudHMgYWZ0ZXIgdGhlIGNvbGxlY3Rpb24gb3ZlcnZpZXdcbiAgICAgICAqL1xuICAgICAgYWZ0ZXJEYXNoYm9hcmQ/OiBSZWFjdC5Db21wb25lbnRUeXBlPGFueT5bXVxuICAgICAgLyoqXG4gICAgICAgKiBBZGQgY3VzdG9tIGNvbXBvbmVudHMgYWZ0ZXIgdGhlIGVtYWlsL3Bhc3N3b3JkIGZpZWxkXG4gICAgICAgKi9cbiAgICAgIGFmdGVyTG9naW4/OiBSZWFjdC5Db21wb25lbnRUeXBlPGFueT5bXVxuICAgICAgLyoqXG4gICAgICAgKiBBZGQgY3VzdG9tIGNvbXBvbmVudHMgYWZ0ZXIgdGhlIG5hdmlnYXRpb24gbGlua3NcbiAgICAgICAqL1xuICAgICAgYWZ0ZXJOYXZMaW5rcz86IFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PltdXG4gICAgICAvKipcbiAgICAgICAqIEFkZCBjdXN0b20gY29tcG9uZW50cyBiZWZvcmUgdGhlIGNvbGxlY3Rpb24gb3ZlcnZpZXdcbiAgICAgICAqL1xuICAgICAgYmVmb3JlRGFzaGJvYXJkPzogUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+W11cbiAgICAgIC8qKlxuICAgICAgICogQWRkIGN1c3RvbSBjb21wb25lbnRzIGJlZm9yZSB0aGUgZW1haWwvcGFzc3dvcmQgZmllbGRcbiAgICAgICAqL1xuICAgICAgYmVmb3JlTG9naW4/OiBSZWFjdC5Db21wb25lbnRUeXBlPGFueT5bXVxuICAgICAgLyoqXG4gICAgICAgKiBBZGQgY3VzdG9tIGNvbXBvbmVudHMgYmVmb3JlIHRoZSBuYXZpZ2F0aW9uIGxpbmtzXG4gICAgICAgKi9cbiAgICAgIGJlZm9yZU5hdkxpbmtzPzogUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+W11cbiAgICAgIC8qKiBSZXBsYWNlIGdyYXBoaWNhbCBjb21wb25lbnRzICovXG4gICAgICBncmFwaGljcz86IHtcbiAgICAgICAgLyoqIFJlcGxhY2UgdGhlIGljb24gaW4gdGhlIG5hdmlnYXRpb24gKi9cbiAgICAgICAgSWNvbj86IFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PlxuICAgICAgICAvKiogUmVwbGFjZSB0aGUgbG9nbyBvbiB0aGUgbG9naW4gcGFnZSAqL1xuICAgICAgICBMb2dvPzogUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+XG4gICAgICB9XG4gICAgICAvKiogUmVwbGFjZSBsb2dvdXQgcmVsYXRlZCBjb21wb25lbnRzICovXG4gICAgICBsb2dvdXQ/OiB7XG4gICAgICAgIC8qKiBSZXBsYWNlIHRoZSBsb2dvdXQgYnV0dG9uICAqL1xuICAgICAgICBCdXR0b24/OiBSZWFjdC5Db21wb25lbnRUeXBlPGFueT5cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogV3JhcCB0aGUgYWRtaW4gZGFzaGJvYXJkIGluIGN1c3RvbSBjb250ZXh0IHByb3ZpZGVyc1xuICAgICAgICovXG4gICAgICBwcm92aWRlcnM/OiBSZWFjdC5Db21wb25lbnRUeXBlPHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9PltdXG4gICAgICAvKipcbiAgICAgICAqIFJlcGxhY2Ugb3IgbW9kaWZ5IHRvcC1sZXZlbCBhZG1pbiByb3V0ZXMsIG9yIGFkZCBuZXcgb25lczpcbiAgICAgICAqICsgYEFjY291bnRgIC0gYC9hZG1pbi9hY2NvdW50YFxuICAgICAgICogKyBgRGFzaGJvYXJkYCAtIGAvYWRtaW5gXG4gICAgICAgKiArIGA6cGF0aGAgLSBgL2FkbWluLzpwYXRoYFxuICAgICAgICovXG4gICAgICB2aWV3cz86IHtcbiAgICAgICAgLyoqIEFkZCBjdXN0b20gYWRtaW4gdmlld3MgKi9cbiAgICAgICAgW2tleTogc3RyaW5nXTogQWRtaW5WaWV3XG4gICAgICAgIC8qKiBSZXBsYWNlIHRoZSBhY2NvdW50IHNjcmVlbiAqL1xuICAgICAgICBBY2NvdW50PzogQWRtaW5WaWV3XG4gICAgICAgIC8qKiBSZXBsYWNlIHRoZSBhZG1pbiBob21lcGFnZSAqL1xuICAgICAgICBEYXNoYm9hcmQ/OiBBZG1pblZpZXdcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqIEFic29sdXRlIHBhdGggdG8gYSBzdHlsZXNoZWV0IHRoYXQgeW91IGNhbiB1c2UgdG8gb3ZlcnJpZGUgLyBjdXN0b21pemUgdGhlIEFkbWluIHBhbmVsIHN0eWxpbmcuICovXG4gICAgY3NzPzogc3RyaW5nXG4gICAgLyoqIEdsb2JhbCBkYXRlIGZvcm1hdCB0aGF0IHdpbGwgYmUgdXNlZCBmb3IgYWxsIGRhdGVzIGluIHRoZSBBZG1pbiBwYW5lbC4gQW55IHZhbGlkIGRhdGUtZm5zIGZvcm1hdCBwYXR0ZXJuIGNhbiBiZSB1c2VkLiAqL1xuICAgIGRhdGVGb3JtYXQ/OiBzdHJpbmdcbiAgICAvKiogSWYgc2V0IHRvIHRydWUsIHRoZSBlbnRpcmUgQWRtaW4gcGFuZWwgd2lsbCBiZSBkaXNhYmxlZC4gKi9cbiAgICBkaXNhYmxlPzogYm9vbGVhblxuICAgIC8qKiBUaGUgcm91dGUgdGhlIHVzZXIgd2lsbCBiZSByZWRpcmVjdGVkIHRvIGFmdGVyIGJlaW5nIGluYWN0aXZlIGZvciB0b28gbG9uZy4gKi9cbiAgICBpbmFjdGl2aXR5Um91dGU/OiBzdHJpbmdcbiAgICAvKiogUmVwbGFjZSB0aGUgZW50aXJldHkgb2YgdGhlIGluZGV4Lmh0bWwgZmlsZSB1c2VkIGJ5IHRoZSBBZG1pbiBwYW5lbC4gUmVmZXJlbmNlIHRoZSBiYXNlIGluZGV4Lmh0bWwgZmlsZSB0byBlbnN1cmUgeW91ciByZXBsYWNlbWVudCBoYXMgdGhlIGFwcHJvcHJpYXRlIEhUTUwgZWxlbWVudHMuICovXG4gICAgaW5kZXhIVE1MPzogc3RyaW5nXG4gICAgbGl2ZVByZXZpZXc/OiBMaXZlUHJldmlld0NvbmZpZyAmIHtcbiAgICAgIGNvbGxlY3Rpb25zPzogc3RyaW5nW11cbiAgICAgIGdsb2JhbHM/OiBzdHJpbmdbXVxuICAgIH1cbiAgICAvKiogVGhlIHJvdXRlIGZvciB0aGUgbG9nb3V0IHBhZ2UuICovXG4gICAgbG9nb3V0Um91dGU/OiBzdHJpbmdcbiAgICAvKiogQmFzZSBtZXRhIGRhdGEgdG8gdXNlIGZvciB0aGUgQWRtaW4gcGFuZWwuIEluY2x1ZGVkIHByb3BlcnRpZXMgYXJlIHRpdGxlU3VmZml4LCBvZ0ltYWdlLCBhbmQgZmF2aWNvbi4gKi9cbiAgICBtZXRhPzoge1xuICAgICAgLyoqXG4gICAgICAgKiBQdWJsaWMgcGF0aCB0byBhbiBpY29uXG4gICAgICAgKlxuICAgICAgICogVGhpcyBpbWFnZSBtYXkgYmUgZGlzcGxheWVkIGluIHRoZSBicm93c2VyIG5leHQgdG8gdGhlIHRpdGxlIG9mIHRoZSBwYWdlXG4gICAgICAgKi9cbiAgICAgIGZhdmljb24/OiBzdHJpbmdcbiAgICAgIC8qKlxuICAgICAgICogUHVibGljIHBhdGggdG8gYW4gaW1hZ2VcbiAgICAgICAqXG4gICAgICAgKiBUaGlzIGltYWdlIG1heSBiZSBkaXNwbGF5ZWQgYXMgcHJldmlldyB3aGVuIHRoZSBsaW5rIGlzIHNoYXJlZCBvbiBzb2NpYWwgbWVkaWFcbiAgICAgICAqL1xuICAgICAgb2dJbWFnZT86IHN0cmluZ1xuICAgICAgLyoqXG4gICAgICAgKiBTdHJpbmcgdG8gYXBwZW5kIHRvIHRoZSA8dGl0bGU+IG9mIGFkbWluIHBhZ2VzXG4gICAgICAgKiBAZXhhbXBsZSBgXCIgLSBNeSBCcmFuZFwiYFxuICAgICAgICovXG4gICAgICB0aXRsZVN1ZmZpeD86IHN0cmluZ1xuICAgIH1cbiAgICAvKiogVGhlIHNsdWcgb2YgYSBDb2xsZWN0aW9uIHRoYXQgeW91IHdhbnQgYmUgdXNlZCB0byBsb2cgaW4gdG8gdGhlIEFkbWluIGRhc2hib2FyZC4gKi9cbiAgICB1c2VyPzogc3RyaW5nXG4gICAgLyoqIEN1c3RvbWl6ZSB0aGUgVml0ZSBjb25maWcgdGhhdCdzIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIEFkbWluIHBhbmVsLiAqL1xuICAgIHZpdGU/OiAoY29uZmlnOiBJbmxpbmVDb25maWcpID0+IElubGluZUNvbmZpZ1xuICAgIC8qKiBDdXN0b21pemUgdGhlIFdlYnBhY2sgY29uZmlnIHRoYXQncyB1c2VkIHRvIGdlbmVyYXRlIHRoZSBBZG1pbiBwYW5lbC4gKi9cbiAgICB3ZWJwYWNrPzogKGNvbmZpZzogQ29uZmlndXJhdGlvbikgPT4gQ29uZmlndXJhdGlvblxuICB9XG4gIC8qKlxuICAgKiBNYW5hZ2UgdGhlIGRhdGFtb2RlbCBvZiB5b3VyIGFwcGxpY2F0aW9uXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9wYXlsb2FkY21zLmNvbS9kb2NzL2NvbmZpZ3VyYXRpb24vY29sbGVjdGlvbnMjY29sbGVjdGlvbi1jb25maWdzXG4gICAqL1xuICBjb2xsZWN0aW9ucz86IENvbGxlY3Rpb25Db25maWdbXVxuICAvKipcbiAgICogUmVwbGFjZSB0aGUgYnVpbHQtaW4gY29tcG9uZW50cyB3aXRoIGN1c3RvbSBvbmVzXG4gICAqL1xuICBjb21wb25lbnRzPzogeyBba2V5OiBzdHJpbmddOiAoKCkgPT4gSlNYLkVsZW1lbnQpIHwgSlNYLkVsZW1lbnQgfVxuICAvKipcbiAgICogUHJlZml4IGEgc3RyaW5nIHRvIGFsbCBjb29raWVzIHRoYXQgUGF5bG9hZCBzZXRzLlxuICAgKlxuICAgKiBAZGVmYXVsdCBcInBheWxvYWRcIlxuICAgKi9cbiAgY29va2llUHJlZml4Pzogc3RyaW5nXG4gIC8qKiBFaXRoZXIgYSB3aGl0ZWxpc3QgYXJyYXkgb2YgVVJMUyB0byBhbGxvdyBDT1JTIHJlcXVlc3RzIGZyb20sIG9yIGEgd2lsZGNhcmQgc3RyaW5nICgnKicpIHRvIGFjY2VwdCBpbmNvbWluZyByZXF1ZXN0cyBmcm9tIGFueSBkb21haW4uICovXG4gIGNvcnM/OiAnKicgfCBzdHJpbmdbXVxuXG4gIC8qKiBBIHdoaXRlbGlzdCBhcnJheSBvZiBVUkxzIHRvIGFsbG93IFBheWxvYWQgY29va2llcyB0byBiZSBhY2NlcHRlZCBmcm9tIGFzIGEgZm9ybSBvZiBDU1JGIHByb3RlY3Rpb24uICovXG4gIGNzcmY/OiBzdHJpbmdbXVxuXG4gIC8qKiBFeHRlbnNpb24gcG9pbnQgdG8gYWRkIHlvdXIgY3VzdG9tIGRhdGEuICovXG4gIGN1c3RvbT86IFJlY29yZDxzdHJpbmcsIGFueT5cbiAgLyoqIFBhc3MgaW4gYSBkYXRhYmFzZSBhZGFwdGVyIGZvciB1c2Ugb24gdGhpcyBwcm9qZWN0LiAqL1xuICBkYjogKGFyZ3M6IHsgcGF5bG9hZDogUGF5bG9hZCB9KSA9PiBCYXNlRGF0YWJhc2VBZGFwdGVyXG4gIC8qKiBFbmFibGUgdG8gZXhwb3NlIG1vcmUgZGV0YWlsZWQgZXJyb3IgaW5mb3JtYXRpb24uICovXG4gIGRlYnVnPzogYm9vbGVhblxuICAvKipcbiAgICogSWYgYSB1c2VyIGRvZXMgbm90IHNwZWNpZnkgYGRlcHRoYCB3aGlsZSByZXF1ZXN0aW5nIGEgcmVzb3VyY2UsIHRoaXMgZGVwdGggd2lsbCBiZSB1c2VkLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vcGF5bG9hZGNtcy5jb20vZG9jcy9nZXR0aW5nLXN0YXJ0ZWQvY29uY2VwdHMjZGVwdGhcbiAgICpcbiAgICogQGRlZmF1bHQgMlxuICAgKi9cbiAgZGVmYXVsdERlcHRoPzogbnVtYmVyXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBhbGxvd2VkIGRlcHRoIHRvIGJlIHBlcm1pdHRlZCBhcHBsaWNhdGlvbi13aWRlLiBUaGlzIHNldHRpbmcgaGVscHMgcHJldmVudCBhZ2FpbnN0IG1hbGljaW91cyBxdWVyaWVzLlxuICAgKlxuICAgKiBAZGVmYXVsdCA0MDAwMFxuICAgKi9cbiAgZGVmYXVsdE1heFRleHRMZW5ndGg/OiBudW1iZXJcbiAgLyoqIERlZmF1bHQgcmljaHRleHQgZWRpdG9yIHRvIHVzZSBmb3IgcmljaFRleHQgZmllbGRzICovXG4gIGVkaXRvcjogUmljaFRleHRBZGFwdGVyPGFueSwgYW55LCBhbnk+XG4gIC8qKlxuICAgKiBFbWFpbCBjb25maWd1cmF0aW9uIG9wdGlvbnMuIFRoaXMgdmFsdWUgaXMgb3ZlcnJpZGRlbiBieSBgZW1haWxgIGluIFBheWxvYWQuaW5pdCBpZiBwYXNzZWQuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9wYXlsb2FkY21zLmNvbS9kb2NzL2VtYWlsL292ZXJ2aWV3XG4gICAqL1xuICBlbWFpbD86IEVtYWlsT3B0aW9uc1xuICAvKiogQ3VzdG9tIFJFU1QgZW5kcG9pbnRzICovXG4gIGVuZHBvaW50cz86IEVuZHBvaW50W11cbiAgLyoqXG4gICAqIEV4cHJlc3Mtc3BlY2lmaWMgbWlkZGxld2FyZSBvcHRpb25zIHN1Y2ggYXMgY29tcHJlc3Npb24gYW5kIEpTT04gcGFyc2luZy5cbiAgICpcbiAgICogQHNlZSBodHRwczovL3BheWxvYWRjbXMuY29tL2RvY3MvY29uZmlndXJhdGlvbi9leHByZXNzXG4gICAqL1xuICBleHByZXNzPzoge1xuICAgIC8qKiBDb250cm9sIHRoZSB3YXkgcmVzcG9uc2VzIGFyZSBjb21wcmVzc2VkICovXG4gICAgY29tcHJlc3Npb24/OiB7XG4gICAgICBba2V5OiBzdHJpbmddOiB1bmtub3duXG4gICAgfVxuICAgIC8qKiBDb250cm9sIHRoZSB3YXkgSlNPTiBpcyBwYXJzZWQgKi9cbiAgICBqc29uPzoge1xuICAgICAgLyoqIERlZmF1bHRzIHRvIDJNQiAgKi9cbiAgICAgIGxpbWl0PzogbnVtYmVyXG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIGV4cHJlc3MubWlkZGxld2FyZSB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi4gUGxlYXNlIG1pZ3JhdGUgdG8gZXhwcmVzcy5wb3N0TWlkZGxld2FyZS5cbiAgICAgKi9cbiAgICBtaWRkbGV3YXJlPzogYW55W11cbiAgICBwb3N0TWlkZGxld2FyZT86IGFueVtdXG4gICAgcHJlTWlkZGxld2FyZT86IGFueVtdXG4gIH1cbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9wYXlsb2FkY21zLmNvbS9kb2NzL2NvbmZpZ3VyYXRpb24vZ2xvYmFscyNnbG9iYWwtY29uZmlnc1xuICAgKi9cbiAgZ2xvYmFscz86IEdsb2JhbENvbmZpZ1tdXG4gIC8qKlxuICAgKiBNYW5hZ2UgdGhlIEdyYXBoUUwgQVBJXG4gICAqXG4gICAqIFlvdSBjYW4gYWRkIHlvdXIgb3duIEdyYXBoUUwgcXVlcmllcyBhbmQgbXV0YXRpb25zIHRvIFBheWxvYWQsIG1ha2luZyB1c2Ugb2YgYWxsIHRoZSB0eXBlcyB0aGF0IFBheWxvYWQgaGFzIGRlZmluZWQgZm9yIHlvdS5cbiAgICpcbiAgICogQHNlZSBodHRwczovL3BheWxvYWRjbXMuY29tL2RvY3MvYWNjZXNzLWNvbnRyb2wvb3ZlcnZpZXdcbiAgICovXG4gIGdyYXBoUUw/OiB7XG4gICAgZGlzYWJsZT86IGJvb2xlYW5cbiAgICBkaXNhYmxlUGxheWdyb3VuZEluUHJvZHVjdGlvbj86IGJvb2xlYW5cbiAgICBtYXhDb21wbGV4aXR5PzogbnVtYmVyXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIGtleXMgdG8gY3VzdG9tIEdyYXBoUUwgbXV0YXRpb25zXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vcGF5bG9hZGNtcy5jb20vZG9jcy9hY2Nlc3MtY29udHJvbC9vdmVydmlld1xuICAgICAqL1xuICAgIG11dGF0aW9ucz86IEdyYXBoUUxFeHRlbnNpb25cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcga2V5cyB0byBjdXN0b20gR3JhcGhRTCBxdWVyaWVzXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vcGF5bG9hZGNtcy5jb20vZG9jcy9hY2Nlc3MtY29udHJvbC9vdmVydmlld1xuICAgICAqL1xuICAgIHF1ZXJpZXM/OiBHcmFwaFFMRXh0ZW5zaW9uXG4gICAgc2NoZW1hT3V0cHV0RmlsZT86IHN0cmluZ1xuICB9XG4gIC8qKlxuICAgKiBUYXAgaW50byBQYXlsb2FkLXdpZGUgaG9va3MuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9wYXlsb2FkY21zLmNvbS9kb2NzL2hvb2tzL292ZXJ2aWV3XG4gICAqL1xuICBob29rcz86IHtcbiAgICBhZnRlckVycm9yPzogQWZ0ZXJFcnJvckhvb2tcbiAgfVxuICAvKipcbiAgICogQ29udHJvbCB0aGUgYmVoYXZpb3VyIG9mIHRoZSBhZG1pbiBpbnRlcm5hdGlvbmFsaXNhdGlvbi5cbiAgICpcbiAgICogU2VlIGkxOG5leHQgb3B0aW9ucy5cbiAgICpcbiAgICogQGRlZmF1bHRcbiAgICoge1xuICAgKiAgIGZhbGxiYWNrTG5nOiAnZW4nLFxuICAgKiAgIGRlYnVnOiBmYWxzZSxcbiAgICogICBzdXBwb3J0ZWRMbmdzOiBPYmplY3Qua2V5cyh0cmFuc2xhdGlvbnMpLFxuICAgKiAgIHJlc291cmNlczogdHJhbnNsYXRpb25zLFxuICAgKiB9XG4gICAqL1xuICBpMThuPzogaTE4bkluaXRPcHRpb25zXG4gIC8qKiBBdXRvbWF0aWNhbGx5IGluZGV4IGFsbCBzb3J0YWJsZSB0b3AtbGV2ZWwgZmllbGRzIGluIHRoZSBkYXRhYmFzZSB0byBpbXByb3ZlIHNvcnQgcGVyZm9ybWFuY2UgYW5kIGFkZCBkYXRhYmFzZSBjb21wYXRpYmlsaXR5IGZvciBBenVyZSBDb3Ntb3MgYW5kIHNpbWlsYXIuICovXG4gIGluZGV4U29ydGFibGVGaWVsZHM/OiBib29sZWFuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGUgeW91ciBjb250ZW50IHRvIGRpZmZlcmVudCBsYW5ndWFnZXMvbG9jYWxlcy5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2UgLy8gZGlzYWJsZSBsb2NhbGl6YXRpb25cbiAgICovXG4gIGxvY2FsaXphdGlvbj86IExvY2FsaXphdGlvbkNvbmZpZyB8IGZhbHNlXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBhbGxvd2VkIGRlcHRoIHRvIGJlIHBlcm1pdHRlZCBhcHBsaWNhdGlvbi13aWRlLiBUaGlzIHNldHRpbmcgaGVscHMgcHJldmVudCBhZ2FpbnN0IG1hbGljaW91cyBxdWVyaWVzLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vcGF5bG9hZGNtcy5jb20vZG9jcy9nZXR0aW5nLXN0YXJ0ZWQvY29uY2VwdHMjZGVwdGhcbiAgICpcbiAgICogQGRlZmF1bHQgMTBcbiAgICovXG4gIG1heERlcHRoPzogbnVtYmVyXG4gIC8qKiBBIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIGltbWVkaWF0ZWx5IGZvbGxvd2luZyBzdGFydHVwIHRoYXQgcmVjZWl2ZXMgdGhlIFBheWxvYWQgaW5zdGFuY2UgYXMgaXRzIG9ubHkgYXJndW1lbnQuICovXG4gIG9uSW5pdD86IChwYXlsb2FkOiBQYXlsb2FkKSA9PiBQcm9taXNlPHZvaWQ+IHwgdm9pZFxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgUGF5bG9hZCBwbHVnaW5zLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vcGF5bG9hZGNtcy5jb20vZG9jcy9wbHVnaW5zL292ZXJ2aWV3XG4gICAqL1xuICBwbHVnaW5zPzogUGx1Z2luW11cbiAgLyoqXG4gICAqIExpbWl0IGhlYXZ5IHVzYWdlXG4gICAqXG4gICAqIEBkZWZhdWx0XG4gICAqIHtcbiAgICogICB3aW5kb3c6IDE1ICogNjAgKiAxMDAwLCAvLyAxNSBtaW51dGVzLFxuICAgKiAgIG1heDogNTAwLFxuICAgKiB9XG4gICAqL1xuICByYXRlTGltaXQ/OiB7XG4gICAgbWF4PzogbnVtYmVyXG4gICAgc2tpcD86IChyZXE6IFBheWxvYWRSZXF1ZXN0KSA9PiBib29sZWFuXG4gICAgdHJ1c3RQcm94eT86IGJvb2xlYW5cbiAgICB3aW5kb3c/OiBudW1iZXJcbiAgfVxuICAvKiogQ29udHJvbCB0aGUgcm91dGluZyBzdHJ1Y3R1cmUgdGhhdCBQYXlsb2FkIGJpbmRzIGl0c2VsZiB0by4gKi9cbiAgcm91dGVzPzoge1xuICAgIC8qKiBAZGVmYXVsdCBcIi9hZG1pblwiICovXG4gICAgYWRtaW4/OiBzdHJpbmdcbiAgICAvKiogQGRlZmF1bHQgXCIvYXBpXCIgICovXG4gICAgYXBpPzogc3RyaW5nXG4gICAgLyoqIEBkZWZhdWx0IFwiL2dyYXBocWxcIiAgKi9cbiAgICBncmFwaFFMPzogc3RyaW5nXG4gICAgLyoqIEBkZWZhdWx0IFwiL2dyYXBocWwtcGxheWdyb3VuZFwiICovXG4gICAgZ3JhcGhRTFBsYXlncm91bmQ/OiBzdHJpbmdcbiAgfVxuICAvKipcbiAgICogRGVmaW5lIHRoZSBhYnNvbHV0ZSBVUkwgb2YgeW91ciBhcHAgaW5jbHVkaW5nIHRoZSBwcm90b2NvbCwgZm9yIGV4YW1wbGUgYGh0dHBzOi8vZXhhbXBsZS5vcmdgLlxuICAgKiBObyBwYXRocyBhbGxvd2VkLCBvbmx5IHByb3RvY29sLCBkb21haW4gYW5kIChvcHRpb25hbGx5KSBwb3J0LlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vcGF5bG9hZGNtcy5jb20vZG9jcy9jb25maWd1cmF0aW9uL292ZXJ2aWV3I29wdGlvbnNcbiAgICovXG4gIHNlcnZlclVSTD86IHN0cmluZ1xuICAvKiogU2VuZCBhbm9ueW1vdXMgdGVsZW1ldHJ5IGRhdGEgYWJvdXQgZ2VuZXJhbCB1c2FnZS4gKi9cbiAgdGVsZW1ldHJ5PzogYm9vbGVhblxuICAvKiogQ29udHJvbCBob3cgdHlwZXNjcmlwdCBpbnRlcmZhY2VzIGFyZSBnZW5lcmF0ZWQgZnJvbSB5b3VyIGNvbGxlY3Rpb25zLiAqL1xuICB0eXBlc2NyaXB0Pzoge1xuICAgIC8qKiBEaXNhYmxlIGRlY2xhcmUgYmxvY2sgaW4gZ2VuZXJhdGVkIHR5cGVzIGZpbGUgKi9cbiAgICBkZWNsYXJlPzogZmFsc2VcbiAgICAvKiogRmlsZW5hbWUgdG8gd3JpdGUgdGhlIGdlbmVyYXRlZCB0eXBlcyB0byAqL1xuICAgIG91dHB1dEZpbGU/OiBzdHJpbmdcbiAgfVxuICAvKipcbiAgICogQ3VzdG9taXplIHRoZSBoYW5kbGluZyBvZiBpbmNvbWluZyBmaWxlIHVwbG9hZHMgZm9yIGNvbGxlY3Rpb25zIHRoYXQgaGF2ZSB1cGxvYWRzIGVuYWJsZWQuXG4gICAqL1xuICB1cGxvYWQ/OiBFeHByZXNzRmlsZVVwbG9hZE9wdGlvbnNcbn1cblxuZXhwb3J0IHR5cGUgU2FuaXRpemVkQ29uZmlnID0gT21pdDxcbiAgRGVlcFJlcXVpcmVkPENvbmZpZz4sXG4gICdjb2xsZWN0aW9ucycgfCAnZW5kcG9pbnQnIHwgJ2dsb2JhbHMnIHwgJ2xvY2FsaXphdGlvbidcbj4gJiB7XG4gIGNvbGxlY3Rpb25zOiBTYW5pdGl6ZWRDb2xsZWN0aW9uQ29uZmlnW11cbiAgZW5kcG9pbnRzOiBFbmRwb2ludFtdXG4gIGdsb2JhbHM6IFNhbml0aXplZEdsb2JhbENvbmZpZ1tdXG4gIGxvY2FsaXphdGlvbjogU2FuaXRpemVkTG9jYWxpemF0aW9uQ29uZmlnIHwgZmFsc2VcbiAgcGF0aHM6IHtcbiAgICBjb25maWc6IHN0cmluZ1xuICAgIGNvbmZpZ0Rpcjogc3RyaW5nXG4gICAgcmF3Q29uZmlnOiBzdHJpbmdcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBFbnRpdHlEZXNjcmlwdGlvbiA9XG4gIHwgKCgpID0+IHN0cmluZylcbiAgfCBSZWFjdC5Db21wb25lbnRUeXBlPGFueT5cbiAgfCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XG4gIHwgc3RyaW5nXG4iXSwibmFtZXMiOlsiaGFzVHJhbnNwb3J0IiwiaGFzVHJhbnNwb3J0T3B0aW9ucyIsImVtYWlsQ29uZmlnIiwidHJhbnNwb3J0IiwidW5kZWZpbmVkIiwidHJhbnNwb3J0T3B0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFtR2dCQSxZQUFZO2VBQVpBOztJQVFBQyxtQkFBbUI7ZUFBbkJBOzs7QUFSVCxTQUFTRCxhQUFhRSxXQUF5QjtJQUNwRCxPQUFPLEFBQUNBLFlBQStCQyxTQUFTLEtBQUtDO0FBQ3ZEO0FBTU8sU0FBU0gsb0JBQ2RDLFdBQXlCO0lBRXpCLE9BQU8sQUFBQ0EsWUFBc0NHLGdCQUFnQixLQUFLRDtBQUNyRSJ9