/* eslint-disable no-use-before-define */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    valueIsValueWithRelation: function() {
        return valueIsValueWithRelation;
    },
    fieldHasSubFields: function() {
        return fieldHasSubFields;
    },
    fieldIsArrayType: function() {
        return fieldIsArrayType;
    },
    fieldIsBlockType: function() {
        return fieldIsBlockType;
    },
    optionIsObject: function() {
        return optionIsObject;
    },
    optionsAreObjects: function() {
        return optionsAreObjects;
    },
    optionIsValue: function() {
        return optionIsValue;
    },
    fieldSupportsMany: function() {
        return fieldSupportsMany;
    },
    fieldHasMaxDepth: function() {
        return fieldHasMaxDepth;
    },
    fieldIsPresentationalOnly: function() {
        return fieldIsPresentationalOnly;
    },
    fieldAffectsData: function() {
        return fieldAffectsData;
    },
    tabHasName: function() {
        return tabHasName;
    },
    fieldIsLocalized: function() {
        return fieldIsLocalized;
    }
});
function valueIsValueWithRelation(value) {
    return value !== null && typeof value === 'object' && 'relationTo' in value && 'value' in value;
}
function fieldHasSubFields(field) {
    return field.type === 'group' || field.type === 'array' || field.type === 'row' || field.type === 'collapsible';
}
function fieldIsArrayType(field) {
    return field.type === 'array';
}
function fieldIsBlockType(field) {
    return field.type === 'blocks';
}
function optionIsObject(option) {
    return typeof option === 'object';
}
function optionsAreObjects(options) {
    return Array.isArray(options) && typeof options?.[0] === 'object';
}
function optionIsValue(option) {
    return typeof option === 'string';
}
function fieldSupportsMany(field) {
    return field.type === 'select' || field.type === 'relationship';
}
function fieldHasMaxDepth(field) {
    return (field.type === 'upload' || field.type === 'relationship') && typeof field.maxDepth === 'number';
}
function fieldIsPresentationalOnly(field) {
    return field.type === 'ui';
}
function fieldAffectsData(field) {
    return 'name' in field && !fieldIsPresentationalOnly(field);
}
function tabHasName(tab) {
    return 'name' in tab;
}
function fieldIsLocalized(field) {
    return 'localized' in field && field.localized;
}

//# sourceMappingURL=data:application/json;base64,